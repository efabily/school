<?php


/**
 * Skeleton subclass for performing query and update operations on the 'sch_item_for_sale' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Fri Sep 28 00:21:35 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.student
 */
class ItemForSalePeer extends BaseItemForSalePeer {

   /**
    *
    * @param Int $account_id
    * @param Int $id_state
    * @return ItemForSales
    */
   public static function getItemForSaleByAccount($account_id, $id_state = null)
   {
      $criteria = new Criteria();
      $criteria->addJoin(self::SALES_ID, SalesPeer::ID);
      $criteria->addJoin(SalesPeer::ID, SaleAccountPeer::SALES_ID);
      
      $criteria->add(SaleAccountPeer::ACCOUNT_ID, $account_id);
      
      if($id_state)
      {
	 $criteria->add(SaleAccountPeer::ID_STATE, $id_state);
      }      
      
      return self::doSelect($criteria);
   }
   
   /**
    * Devuelve todos los items para una venta
    * @param Int $sales_id
    * @return ItemForSales
    */
   public static function getItemForSaleBySales($sales_id)
   {
      $criteria = new Criteria();
      
      $criteria->add(self::SALES_ID, $sales_id);
      $criteria->add(self::DELETED, 0);
      $criteria->addOr(self::DELETED, Null, Criteria::ISNULL);
      
      $criteria->addGroupByColumn(self::ID);
      
      return self::doSelect($criteria);      
   }
   
   /**
    *
    * @param Int $deposit_id
    * @param Int $id_state
    * @return ItemsForSales
    */
   public static function getItemForSaleByDeposit($deposit_id, $id_state = null)
   {
      $criteria = new Criteria();
      $criteria->addJoin(self::SALES_ID, SalesPeer::ID);
      $criteria->addJoin(SalesPeer::ID, SalesDepositPeer::SALES_ID);
      
      $criteria->add(SalesDepositPeer::DEPOSIT_ID, $deposit_id);      
            
      if($id_state)
      {
	 $criteria->add(SalesDepositPeer::ID_STATE, $id_state);
      }      
      
      return self::doSelect($criteria);
   }
   
   /**
    * Verifica si un item es de tipo mensualidad y si ya esta agregado a la cuenta
    * @param Int $item_id
    * @param Int $account_id
    * @param Int $id_state || Null
    * @return ItemForSale
    */
   Public static function getItemForSaleByAccountAndTypeItem($item_id, $account_id, $id_state = null)
   {
      $criteria = new Criteria();
      $criteria->addJoin(self::ITEM_ID, ItemPeer::ID);      
      $criteria->add(ItemPeer::TYPE_ITEM_ID, 1);// Tipo Mensualidad
      $criteria->add(self::ITEM_ID, $item_id);
      $criteria->addJoin(self::SALES_ID, SalesPeer::ID);
      $criteria->addJoin(SalesPeer::ID, SaleAccountPeer::SALES_ID);
      $criteria->add(SaleAccountPeer::ACCOUNT_ID, $account_id);
      if($id_state)
      {
	 $criteria->add(SaleAccountPeer::ID_STATE, $id_state);
      }      
            
      return self::doSelectOne($criteria);
   }
   
   
   
   public static function getItemMoras($sales_id)
   {
      $criteria = new Criteria();      
      $criteria->add(self::SALES_ID, $sales_id);
//      $criteria->add(self::DELETED, 0);
      $criteria->add(self::ITEM_ID, 1);            
      
      return self::doSelectOne($criteria);      
   }
   
   
   public static function getItemExistsInTheSale($sales_id, $item_id)
   {
      $criteria = new Criteria();
      $criteria->add(self::SALES_ID, $sales_id);
      $criteria->add(self::ITEM_ID, $item_id);
      
      return self::doSelectOne($criteria);
   }
   
   
   public static function getItemForSaleByCashier($cashier_id, $id_state_sales = 1)
   {
      $criteria = new Criteria();
      $criteria->addJoin(self::SALES_ID, SalesPeer::ID);      
      $criteria->add(SalesPeer::CASHIER_ID, $cashier_id);      
      $criteria->add(SalesPeer::ID_STATE, $id_state_sales);
      
      return self::doSelect($criteria);
   }
   
   public static function getMensualidad($contract_id)
   {
      $criteria = new Criteria();
      $criteria->addJoin(self::ITEM_ID, ItemPeer::ID);
      $criteria->addJoin(self::SALES_ID, SalesPeer::ID);
      $criteria->addJoin(SalesPeer::ID, SaleAccountPeer::SALES_ID);
      $criteria->addJoin(SaleAccountPeer::ACCOUNT_ID, AccountPeer::ID);
      $criteria->add(AccountPeer::CONTRACT_ID, $contract_id);
      $criteria->add(ItemPeer::TYPE_ITEM_ID, 2); // Mensualidad de colegio
      
      return self::doSelectOne($criteria);
   }
   
   
   public static function getItemForSaleByCashbox($cashbox_id)
   {
      $criteria = new Criteria();
      $criteria->addJoin(self::SALES_ID, SalesPeer::ID);
      $criteria->addJoin(SalesPeer::ID, MovementCashboxSalesPeer::SALES_ID);
      $criteria->addJoin(MovementCashboxSalesPeer::MOVEMENT_CASHBOX_ID, MovementCashboxPeer::ID);
      $criteria->add(MovementCashboxPeer::CASHBOX_ID, $cashbox_id);
      $criteria->addGroupByColumn(self::ID);
      
      return self::doSelect($criteria);
   }
   
   
   public static function getItemForSaleByReceipt($receipt_id)
   {
      $criteria = new Criteria();
      $criteria->addJoin(self::SALES_ID, SalesPeer::ID);
      $criteria->addJoin(SalesPeer::ID, SalesDepositPeer::SALES_ID);
      $criteria->addJoin(SalesDepositPeer::DEPOSIT_ID, DepositPeer::ID);
      $criteria->addJoin(DepositPeer::ID, MovementCashboxDepositPeer::DEPOSIT_ID);
      $criteria->addJoin(MovementCashboxDepositPeer::MOVEMENT_CASHBOX_ID, MovementCashboxReceiptPeer::MOVEMENT_CASHBOX_ID);
      
      $criteria->add(MovementCashboxReceiptPeer::RECEIPT_ID, $receipt_id);
      $criteria->addGroupByColumn(self::ID);
      
      return self::doSelect($criteria);
   }
   
   public static function getItemForSaleBySellDirect($receipt_id)
   {
      $criteria = new Criteria();
      $criteria->addJoin(self::SALES_ID, SalesPeer::ID);
      $criteria->addJoin(SalesPeer::ID, MovementCashboxSalesPeer::SALES_ID);
      $criteria->addJoin(MovementCashboxSalesPeer::MOVEMENT_CASHBOX_ID, MovementCashboxReceiptPeer::MOVEMENT_CASHBOX_ID);
      
      $criteria->add(MovementCashboxReceiptPeer::RECEIPT_ID, $receipt_id);
      $criteria->addGroupByColumn(self::ID);
      
      return self::doSelect($criteria);
   }
   
   public static function getItemForSaleByContract($contract_id)
   {
      $criteria = new Criteria();
      $criteria->addJoin(self::SALES_ID, SalesPeer::ID);
      $criteria->addJoin(SalesPeer::ID, SaleAccountPeer::SALES_ID);
      $criteria->addJoin(SaleAccountPeer::ACCOUNT_ID, AccountPeer::ID);
      $criteria->add(AccountPeer::CONTRACT_ID, $contract_id);
      $criteria->add(SaleAccountPeer::ID_STATE, 3, Criteria::LESS_THAN);
      
      $criteria->addGroupByColumn(self::ID);
      
      return self::doSelect($criteria);
      
   }
   
   public static function getMensualidadByAccountId($account_id)
   {
      $criteria = new Criteria();
      $criteria->addJoin(self::ITEM_ID, ItemPeer::ID);
      $criteria->addJoin(self::SALES_ID, SalesPeer::ID);
      $criteria->addJoin(SalesPeer::ID, SaleAccountPeer::SALES_ID);
      $criteria->addJoin(SaleAccountPeer::ACCOUNT_ID, AccountPeer::ID);
      $criteria->add(AccountPeer::ID, $account_id);
      $criteria->add(ItemPeer::TYPE_ITEM_ID, 2); // Mensualidad de colegio
      
      return self::doSelectOne($criteria);
   }
   
   
   
} // ItemForSalePeer