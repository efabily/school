<?php


/**
 * Skeleton subclass for performing query and update operations on the 'sch_contract' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sun Oct  7 14:56:18 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.student
 */
class ContractPeer extends BaseContractPeer {


   /**
    *
    * @param Int $id_state
    * @param Int $nro
    * @param Float $amount
    * @param String $container
    * @param String $description
    * @param Int $record_date
    * @param String $city
    * @param Int $student_id
    * @param Int $period_id
    * @param Contract $contract || null
    * @param PropelPDO $con
    * @return Contract
    */
   public static function saveContract($id_state, $nro, $amount, $container, $description, $record_date, $city, $student_id, $period_id, $contract = null, $con = null)
   {
      if(!is_object($contract))
      {
	 $contract = new Contract();
      }

      $contract->setIdState($id_state);
      $contract->setNro($nro);
      $contract->setAmount($amount);
      $contract->setContainer($container);
      $contract->setDescription($description);
      $contract->setRecordDate($record_date);
      $contract->setCity($city);
      $contract->setStudentId($student_id);
      $contract->setPeriodId($period_id);
      $contract->save($con);

      return $contract;
   }

   /**
    *
    * @param Int $student_id
    * @param Int $period_id
    * @param Int $id_state
    * @return Contract
    */
   public static function getContract($student_id = null, $period_id = null, $id_state = null)
   {
      $criteria = new Criteria();

      if($student_id)
      {
	 $criteria->add(self::STUDENT_ID, $student_id);
      }

      if($period_id)
      {
	 $criteria->add(self::PERIOD_ID, $period_id);
      }

      if($id_state)
      {
	 $criteria->add(self::ID_STATE, $id_state);
      }

      return self::doSelectOne($criteria);
   }


   public static function getLastContract($student_id)
   {
      $criteria = new Criteria();
      $criteria->add(self::STUDENT_ID, $student_id);
      $criteria->addDescendingOrderByColumn(self::ID);

      return self::doSelectOne($criteria);
   }

   public static function getAllContracts($student_id, $period_id = null)
   {
      $criteria = new Criteria();
      $criteria->add(self::STUDENT_ID, $student_id);

      if($period_id)
      {
	 	$criteria->add(self::PERIOD_ID, $period_id, Criteria::NOT_EQUAL);
      }

      $criteria->addGroupByColumn(self::ID);

      return self::doSelect($criteria);
   }


   public static function getAllContractsDistintCurrent($student_id)
   {
   		$criteria = new Criteria();
   		$criteria->add(self::STUDENT_ID, $student_id);

   		$criteria->addJoin(self::PERIOD_ID, PeriodPeer::ID);

   		$criteria->add(PeriodPeer::ID_STATE, 3);

   		$criteria->addGroupByColumn(self::ID);

   		return self::doSelect($criteria);
   }


   /**
    * Devuelve el total de mensualidad de un contrato
    * El total de mensualidad pagadas de un contrato
    * El saldo de mensualidades adeuda de un contrato
    *
    * La cantidad de cuotas vencidas de un contrato
    *
    * @param Int $contract_id
    * @return array
    */
   public static function getDatosMensualidad($contract_id)
   {
      $total_mensualidad = 0;
      $total_mensualidad_pagada = 0;
      $saldo = 0;
      $cantidad_vencidas = 0;

      $criteria = new Criteria();

      $criteria->addJoin(self::ID, AccountPeer::CONTRACT_ID);
      $criteria->addJoin(AccountPeer::ID, SaleAccountPeer::ACCOUNT_ID);
      $criteria->addJoin(SaleAccountPeer::SALES_ID, SalesPeer::ID);
      $criteria->addJoin(SalesPeer::ID, ItemForSalePeer::SALES_ID);
      $criteria->addJoin(ItemForSalePeer::ITEM_ID, ItemPeer::ID);
      $criteria->add(AccountPeer::CONTRACT_ID, $contract_id);

      $criteria->add(ItemPeer::TYPE_ITEM_ID, 2); // De tipo mensualidad

      $criteria->addGroupByColumn(ItemForSalePeer::ID);

      $item_for_sales = ItemForSalePeer::doSelect($criteria);

      foreach ($item_for_sales as $item_for_sale)
      {
	 $total_mensualidad += $item_for_sale->getSales()->getSaldo();

	 $total_mensualidad_pagada += $item_for_sale->getSales()->getTotalSaleDeposit();

	 $additional_information = $item_for_sale->getAdditionalInformation();
	 if(!$item_for_sale->getSales()->getIsPayForContract() && !empty($additional_information))
	 {
	    $cantidad_vencidas += 1;
	 }
      }

      $saldo = $total_mensualidad - $total_mensualidad_pagada;

      return array($total_mensualidad, $total_mensualidad_pagada, $saldo, $cantidad_vencidas);
   }


   public static function getContracts($student_id = null, $period_id = null, $id_state = null)
   {
      $criteria = new Criteria();

      if($student_id)
      {
	 $criteria->add(self::STUDENT_ID, $student_id);
      }

      if($period_id)
      {
	 $criteria->add(self::PERIOD_ID, $period_id);
      }

      if($id_state)
      {
	 $criteria->add(self::ID_STATE, $id_state);
      }

      return self::doSelect($criteria);
   }

   public static function contractForTheActivePeriod($student_id)
   {
      $criteria = new Criteria();

      $criteria->addJoin(self::PERIOD_ID, PeriodPeer::ID);
      $criteria->add(PeriodPeer::ID_STATE, 2); // Periodo activo
      $criteria->add(self::STUDENT_ID, $student_id);

      return self::doSelectOne($criteria);
   }

   public static function shareOfMaturing($contract_id, $number_account)
   {
      $fecha = '';

      $criteria = new Criteria();

      $criteria->add(self::ID, $contract_id);
      $criteria->addJoin(self::ID, AccountPeer::CONTRACT_ID);
      $criteria->add(AccountPeer::NUMBER, $number_account, Criteria::GREATER_THAN);

      $criteria->addJoin(AccountPeer::ID, SaleAccountPeer::ACCOUNT_ID);
      $criteria->add(SaleAccountPeer::ID_STATE, 3, Criteria::LESS_THAN); // que no este pagado
      $criteria->addJoin(SaleAccountPeer::SALES_ID, SalesPeer::ID);
      $criteria->addJoin(SalesPeer::ID, ItemForSalePeer::SALES_ID);
      $criteria->addJoin(ItemForSalePeer::ITEM_ID, ItemPeer::ID);

      $criteria->add(ItemPeer::TYPE_ITEM_ID, 2); // Que el tipo sea mensualidad

      $account = AccountPeer::doSelectOne($criteria);

      if(is_object($account))
      {
	 $year = $account->getContract()->getPeriod()->getFromDate('Y');
	 $number_account;

	 $fecha = '10-'.$account->getNumber().'-'.$year;
      }

      return $fecha;
   }



   public static function getMensualidadContracto($contract_id)
   {
      $criteria = new Criteria();

      $criteria->addJoin(self::ID, AccountPeer::CONTRACT_ID);
      $criteria->addJoin(AccountPeer::ID, SaleAccountPeer::ACCOUNT_ID);
      $criteria->addJoin(SaleAccountPeer::SALES_ID, SalesPeer::ID);
      $criteria->addJoin(SalesPeer::ID, ItemForSalePeer::SALES_ID);
      $criteria->addJoin(ItemForSalePeer::ITEM_ID, ItemPeer::ID);
      $criteria->add(AccountPeer::CONTRACT_ID, $contract_id);

      $criteria->add(ItemPeer::TYPE_ITEM_ID, 2); // De tipo mensualidad

      $criteria->addGroupByColumn(ItemForSalePeer::ID);

      return ItemForSalePeer::doSelect($criteria);
   }


   public static function getMensualidadSinPago($contract_id)
   {
      $criteria = new Criteria();

      $criteria->addJoin(self::ID, AccountPeer::CONTRACT_ID);
      $criteria->addJoin(AccountPeer::ID, SaleAccountPeer::ACCOUNT_ID);
      $criteria->addJoin(SaleAccountPeer::SALES_ID, SalesPeer::ID);
      $criteria->addJoin(SalesPeer::ID, ItemForSalePeer::SALES_ID);
      $criteria->addJoin(ItemForSalePeer::ITEM_ID, ItemPeer::ID);
      $criteria->add(AccountPeer::CONTRACT_ID, $contract_id);

      $criteria->add(ItemPeer::TYPE_ITEM_ID, 2); // De tipo mensualidad

      $criteria->addJoin(SalesPeer::ID, SalesDepositPeer::SALES_ID, Criteria::LEFT_JOIN);
      $criteria->add(SalesDepositPeer::SALES_ID, Null, Criteria::ISNULL);

      $criteria->addGroupByColumn(SaleAccountPeer::ID);

      return SaleAccountPeer::doSelect($criteria);
   }

} // ContractPeer
