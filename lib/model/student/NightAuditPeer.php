<?php


/**
 * Skeleton subclass for performing query and update operations on the 'sch_night_audit' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Fri Sep 28 00:21:32 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.student
 */
class NightAuditPeer extends BaseNightAuditPeer {

   /**
   *
   * Crea a partir de los datos que se le pase, 
   * una auditoria nocturna
   * 
   * @param Date $date
   * @param Int $sf_guard_user_id
   * @param Int $business_entity_id
   * @param NightAudit $night_audit || null
   * @param PropelPDO $con
   * @return NightAudit 
   */
  public static function CreateNightAudit($date, $sf_guard_user_id, $business_entity_id, $night_audit = null, $con = null)
  {
    if(!$night_audit)
    {
      $night_audit = new NightAudit();
    }
    
    $night_audit->setDate($date);
    $night_audit->setUserId($sf_guard_user_id);
    $night_audit->setBusinessEntityId($business_entity_id);
    $night_audit->save($con);
    
    return $night_audit;
  }
  
   
   /**   
   * Devuelve el ultimo NightAudit creado para 
   * un BusinessEntity
   *   
   * @return NightAudit
   */
  public static function getLastNightAudit()
  {
    $criteria = new Criteria();    
    
    $criteria->addDescendingOrderByColumn(self::ID);
    $criteria->setLimit(1);
    
    return self::doSelectOne($criteria);    
  }
  
  public static function getNightAuditIdByLastNightAudit()
  {
     $night_audit_id = 0;
     $night_audit = self::getLastNightAudit();
     
     if(is_object($night_audit))
     {
	$night_audit_id = $night_audit->getId();
     }
     
     return $night_audit_id;
  }
  
  
  /**
   *
   * @param Int $business_entity_id
   * @param Int $sf_guard_user_id
   * @param date $date
   * @param Int $page
   * @param Int $list_max
   * @return NightAudits
   */
  public static function getNightAudits($business_entity_id =  null, $sf_guard_user_id = null, $date = null, $page = 1, $list_max = 20)
  {
    $criteria = new Criteria();    
    
    if($business_entity_id)
    {           
      $criteria->add(self::BUSINESS_ENTITY_ID, $business_entity_id);
    }    
    
    if ($sf_guard_user_id)
    {
      $criteria->add(self::USER_ID, $sf_guard_user_id);
    }
    
    if ($date)
    {
      $criteria->add(self::DATE, $date);
    }
    
    $criteria->addGroupByColumn(self::ID);    
    $criteria->addDescendingOrderByColumn(self::ID);
    
    return pager::getPager('NightAudit', $criteria, $page, $list_max);        
  }
  
  
  /**
   *
   * @param Int $business_entity_id
   * @return sfDate 
   */
  public static function getNext($business_entity_id = null)
  {
    $night_audit = self::getLast($business_entity_id);
    
    if (is_object($night_audit))
    {
      $next_date = new sfDate($night_audit->getDate());
      $next_date->addDay(1);

      return $next_date;
    } else {
      return null;
    }    
  }
  
  
  /**
   *
   * @param Int $bisness_entity_id
   * @return NightAudit
   */
  public static function getLast($bisness_entity_id)
  {
    $criteria = new Criteria();
    $criteria->add(self::BUSINESS_ENTITY_ID, $bisness_entity_id);
    $criteria->addDescendingOrderByColumn(self::ID);

    return self::doSelectOne($criteria);
  }
  
  
  /**
   *
   * @param BisnessEntity $business_entity
   * @param Int $sf_guard_user_id
   * @param PropelPDO $con
   * @return boolean
   */
  public static function execute($business_entity, $sf_guard_user_id, $con = null)
  {
      // Obtenemos la fecha y hora actual
      $day = new sfDate();
      
      // Obtenemos la Ãºltima auditoria de esta entidad
      $night_audit = self::getLast($business_entity->getId());
      if(is_object($night_audit))
      {
	  $array_date = explode(' ', $night_audit->getDate());
	  
	  $date_time = $array_date[0].' '.$business_entity->getNightAuditHour().':00:00';	  
	  
          $next_audit = new sfDate($date_time);	  
	   
          if ($day->dump() >= $next_audit->dump())
          {  
	     $next_audit->addDay(1);
	     
	     // Cerramos todas las cajas de esta auditoria	  
             CashBoxPeer::CloseAllCashBox($business_entity->getId(), $night_audit->getId(), $con);

             $next_night_audit = self::CreateNightAudit($next_audit->dump(), $sf_guard_user_id, $business_entity->getId(), null, $con);
	
             if(is_object($next_night_audit) && $next_night_audit->getId() > 0)
             {
	       return true;
             }
          } else {                
	     return false;
	  }
      }

  }
  
} // NightAuditPeer
