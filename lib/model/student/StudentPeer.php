<?php


/**
 * Skeleton subclass for performing query and update operations on the 'sch_student' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Tue Sep  4 00:14:38 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.student
 */
class StudentPeer extends BaseStudentPeer {

   /**
    *
    * @param Int $id_state
    * @param String $first_name
    * @param String $father_name
    * @param String $mother_name
    * @param String $rude
    * @param String $codigo
    * @param Date $birth_date
    * @param String $email
    * @param Int $person_id
    * @param Student $student || null
    * @param PropelPDO $con
    * @return Student
    */
   public static function saveStudent($id_state, $first_name, $father_name, $mother_name, $rude, $codigo, $birth_date, $email, $person_id, $student = null, $con = null)
   {
      if(!is_object($student))
      {
	 $student = new Student();
      }
      
      $student->setIdState($id_state);
      $student->setFirstName($first_name);
      $student->setFatherName($father_name);
      $student->setMotherName($mother_name);
      $student->setRude($rude);
      $student->setCodigo($codigo);
      $student->setBirthDate($birth_date);
      $student->setEmail($email);
      $student->setPersonId($person_id);
      $student->save($con);
      
      return $student;
   }
   
   /**
    * Verifica si un estudiante tiene un contrato activo para la gestion que se le pase
    *  Si no se le pasa la gestion el verifica para gestion actualmente activa (la que este en estado 2)
    * 
    * @param Int $student_id
    * @param Int $period_id
    * @return boolean 
    */
   public static function getActive($student_id, $period_id = null)
   {      
      $criteria = new Criteria();
      $criteria->add(self::ID, $student_id);
      
      $criteria->addJoin(self::ID, ContractPeer::STUDENT_ID);
      $criteria->addJoin(ContractPeer::PERIOD_ID, PeriodPeer::ID);
      
      if($period_id)
      {
	$criteria->add(PeriodPeer::ID, $period_id);// Para el periodo que le estamos pasando
      } else {
	$criteria->add(PeriodPeer::ID_STATE, 2);// Para la gestion Actual que este activa
      }
      
      return self::doSelectOne($criteria);
   }
   
   
   public static function isInscrito($student_id, $period_id = null)
   {
      $r = false;
      
      $student = self::getActive($student_id, $period_id);
      
      if(is_object($student))
      {
	 
	 $r = true;
      }
      
      return $r;
   }
   
   
   public static function getCurrentContractId($student_id, $period_id)
   {
      $contract_id = 0;
      
      $criteria = new Criteria();
      $criteria->addJoin(self::ID, ContractPeer::STUDENT_ID);
      
      $criteria->add(self::ID, $student_id);
      $criteria->add(ContractPeer::PERIOD_ID, $period_id);
      
      $contrac = ContractPeer::doSelectOne($criteria);
      
      if(is_object($contrac))
      {
	 $contract_id = $contrac->getId();
      }
      
      return $contract_id;
   }
   
   public static function getStudentByDeposit($deposit_id)
   {
       $criteria = new Criteria();
       
       $criteria->addJoin(self::ID, ContractPeer::STUDENT_ID);
       $criteria->addJoin(ContractPeer::ID, AccountPeer::CONTRACT_ID);
       $criteria->addJoin(AccountPeer::ID, AccountDepositPeer::ACCOUNT_ID);
       $criteria->add(AccountDepositPeer::DEPOSIT_ID, $deposit_id);
       
       return self::doSelectOne($criteria);
   }
   
   public static function getIsPayByContract($student_id)
   {
      $criteria = new Criteria();
      $criteria->addJoin(self::ID, ContractPeer::STUDENT_ID);
      $criteria->addJoin(ContractPeer::ID, AccountPeer::CONTRACT_ID);
      $criteria->addJoin(AccountPeer::ID, SaleAccountPeer::ACCOUNT_ID);
      $criteria->addJoin(SaleAccountPeer::SALES_ID, SalesPeer::ID);
      $criteria->addJoin(SalesPeer::ID, SalesDepositPeer::SALES_ID);
      $criteria->addJoin(SalesDepositPeer::DEPOSIT_ID, DepositPeer::ID);
      $criteria->add(self::ID, $student_id);
      
      return self::doSelectOne($criteria);      
   }
   
   
   public static function getListStudents($period_id, $timetable_id = null, $degree_id = null, $curso_id = null, $codigo = null, $father_name = null, $mother_name = null, $first_name = null)
   {      
      $criteria = new Criteria();
      
      $criteria->addJoin(self::ID, ContractPeer::STUDENT_ID);
      $criteria->add(ContractPeer::PERIOD_ID, $period_id);// Para el periodo que le estamos pasando
      $criteria->addJoin(ContractPeer::ID, ContractGradePeer::CONTRACT_ID);
      $criteria->addJoin(ContractGradePeer::GRADE_ID, GradePeer::ID);
      
      if($timetable_id)
      {
	 $criteria->addAnd(GradePeer::TIMETABLE_ID, $timetable_id);
      }
      
      if($degree_id)
      {
	 $criteria->addAnd(GradePeer::DEGREE_ID, $degree_id);
      }
      
      if($curso_id)
      {
	 $criteria->addAnd(GradePeer::CURSO_ID, $curso_id);
      }
      
      if($codigo)
      {
	 $criteria->addAnd(self::CODIGO, $codigo);
      }
      
      if($father_name)
      {
	 $criteria->addOr(self::FATHER_NAME, '%'.$father_name.'%', Criteria::LIKE);
      }
      
      if($mother_name)
      {
	 $criteria->addOr(self::MOTHER_NAME, '%'.$mother_name.'%', Criteria::LIKE);
      }
      
      if($first_name)
      {
	 $criteria->addOr(self::FIRST_NAME, '%'.$first_name.'%', Criteria::LIKE);
      }
      
      $criteria->add(ContractGradePeer::ID_STATE, 2);
      $criteria->addGroupByColumn(self::ID);
      $criteria->addAscendingOrderByColumn(self::FATHER_NAME);
      
      return self::doSelect($criteria);
   }
   
} // StudentPeer