<?php


/**
 * Skeleton subclass for performing query and update operations on the 'sch_currency' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Fri Sep 28 00:21:32 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.student
 */
class CurrencyPeer extends BaseCurrencyPeer {

   /**
   *  Este metodo devuelve cl CurrencyPrice Activo para un Currency
   * 
   * @param int $currency_id
   * @return CurrencyPrice
   */
  public static function getActiveCurrencyPrice($currency_id = null)
  {
    $criteria = new Criteria();
    $criteria->add(CurrencyPricePeer::ID_STATE, 2);
    $criteria->add(CurrencyPricePeer::CURRENCY_ID, $currency_id);

    return CurrencyPricePeer::doSelectOne($criteria);
  }
  
  
  public static function desactivateCurrencyPrice($currency_id = null, $con = null)
  {
    $c = new Criteria(self::DATABASE_NAME);
    $c->add(CurrencyPricePeer::ID_STATE, 3);
    $c->add(CurrencyPricePeer::CURRENCY_ID, $currency_id);
    
    $cu = new Criteria(self::DATABASE_NAME);
    $cu->add(CurrencyPricePeer::ID_STATE, 4);
    
    return BasePeer::doUpdate($c, $cu, $con);
  }
  
  
  public static function getNewCurrencyPrice($currency_id = null, $today = null, $con = null)
  { 
    $c2 = new Criteria(self::DATABASE_NAME);
    $c2->add(CurrencyPricePeer::CURRENCY_ID, $currency_id);
    $c2->add(CurrencyPricePeer::ID_STATE, 4, Criteria::NOT_EQUAL);
    $c2->addAnd(CurrencyPricePeer::ID_STATE, 1, Criteria::NOT_EQUAL);
    $c2->add(CurrencyPricePeer::SINCE_DATE, $today, Criteria::LESS_EQUAL);  
    $c2->add(CurrencyPricePeer::UNTIL_DATE, $today, Criteria::GREATER_EQUAL); 
    $c2->addDescendingOrderByColumn(CurrencyPricePeer::ID);
    
    $money_price = CurrencyPricePeer::doSelectOne($c2);
   
    if($money_price)
    {
      if($money_price->getIdState() == 2)
      {
        CurrencyPeer::desactivateCurrencyPrice($currency_id, $con);
        
        $money_price->setIdState(3);
        $money_price->setSinceDate(time());
        $money_price->save($con);
      }
      
      return $money_price;       
    } 
  }
  
  
  public static function desactivateDefeatedCurrencyPrice($today = null, $con = null)
  {
    $c = new Criteria(self::DATABASE_NAME);
    $c->add(CurrencyPricePeer::ID_STATE, 3);
    $c->add(CurrencyPricePeer::UNTIL_DATE, $today, Criteria::LESS_THAN);
    
    $cu = new Criteria(self::DATABASE_NAME);
    $cu->add(CurrencyPricePeer::ID_STATE, 4);
    
    return BasePeer::doUpdate($c, $cu, $con);
  }

  public static function actualiceCupOfChange($con = null)
  {
    if ($con === null) 
    {
      $con = Propel::getConnection(self::DATABASE_NAME);
    }	
    
    $today = new sfDate(time());
    
    CurrencyPeer::desactivateDefeatedCurrencyPrice($today->dump(), $con);
  
    $c1 = new Criteria(self::DATABASE_NAME);
    $c1->add(CurrencyPeer::ID_STATE, 2);
    $moneys = CurrencyPeer::doSelect($c1);
    
    foreach ($moneys as $money)
    {
      $money_price = CurrencyPeer::getNewCurrencyPrice($money->getId(), $today->dump(), $con);
      
      $c = new Criteria(self::DATABASE_NAME);
      $c->add(CurrencyPeer::ID, $money->getId());
      
      $cu = new Criteria(self::DATABASE_NAME);
      
      if($money_price)
      {               
        $cu->add(CurrencyPeer::SALE, $money_price->getSale());
        $cu->add(CurrencyPeer::PURCHASE, $money_price->getPurchase());
        // $cu->add(CurrencyPeer::ACTIVE_PRICE, $money_price->getId());
      } else {
        $cu->add(CurrencyPeer::SALE, 1);
        $cu->add(CurrencyPeer::PURCHASE, 1);
      } 
      BasePeer::doUpdate($c, $cu, $con);   
    }	
  }
  
  
} // CurrencyPeer
