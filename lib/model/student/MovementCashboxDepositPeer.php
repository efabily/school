<?php


/**
 * Skeleton subclass for performing query and update operations on the 'sch_movement_cashbox_deposit' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Fri Sep 28 00:21:35 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.student
 */
class MovementCashboxDepositPeer extends BaseMovementCashboxDepositPeer {

   /**
    *
    * @param Int $movement_cashbox_id
    * @param Int $deposit_id
    * @param MovementCashboxDeposit $movement_cashbox_deposit || null
    * @param PropelPDO $con
    * @return MovementCashboxDeposit
    */
   public static function createMovementCashboxDeposit($movement_cashbox_id, $deposit_id, $movement_cashbox_deposit = null, $con = null)
   {
      if(!is_object($movement_cashbox_deposit))
      {
	 $movement_cashbox_deposit = new MovementCashboxDeposit();
      }
      
      $movement_cashbox_deposit->setMovementCashboxId($movement_cashbox_id);
      $movement_cashbox_deposit->setDepositId($deposit_id);
      $movement_cashbox_deposit->save($con);
      
      return $movement_cashbox_deposit;
   }
  
  /**
   * Devulve todos los movimientos realizados a un 
   * deposito 
   * 
   * @param Int $deposit_id
   * @return MovementCashboxs 
   */
  public static function getMovementCashboxByDepositId($deposit_id)
  {
    $criteria = new Criteria();    
    $criteria->addJoin(self::MOVEMENT_CASHBOX_ID, MovementCashboxPeer::ID);    
    $criteria->add(self::DEPOSIT_ID, $deposit_id);
    
    $criteria->addGroupByColumn(MovementCashboxPeer::ID);
    
    return MovementCashboxPeer::doSelect($criteria);    
  }
  

  
  /**
   *
   * @param Int $deposit_id
   * @param Int $form_of_payment
   * @param Int $cashbox_id
   * @return MovementCashboxDeposits 
   */
  public static function getFromDeposit($deposit_id, $form_of_payment = null, $cashbox_id = null)
  {
    $criteria = new Criteria();
    $criteria->add(self::DEPOSIT_ID, $deposit_id);
    
    $criteria->addJoin(self::MOVEMENT_CASHBOX_ID, MovementCashboxPeer::ID);
    $criteria->addJoin(MovementCashboxPeer::PAYMENT_TYPE_ID, PaymentTypePeer::ID);

    if($form_of_payment)
    {      
      $criteria->add(PaymentTypePeer::FORM_OF_PAYMENT_ID, $form_of_payment);
    } else {
      $criteria->addDescendingOrderByColumn(PaymentTypePeer::FORM_OF_PAYMENT_ID);
    }

    if($cashbox_id)
    {
      $criteria->add(MovementCashboxPeer::CASHBOX_ID, $cashbox_id);
    }

      return self::doSelect($criteria);
  }
  
  
  public static function getMovementCashboxDepositByMovementCashboxId($movement_cashbox_id)
  {
    $criteria = new Criteria();
    
    $criteria->add(self::MOVEMENT_CASHBOX_ID, $movement_cashbox_id);
    
    return self::doSelectOne($criteria);    
  }
  
  
  
} // MovementCashboxDepositPeer
