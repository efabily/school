<?php


/**
 * Skeleton subclass for performing query and update operations on the 'sch_sales' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Fri Sep 28 00:21:34 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.student
 */
class SalesPeer extends BaseSalesPeer {

   public static function getSalesByAccount($account_id, $id_state_menor = null, $amount = null, $all = null)
   {
      $criteria = new Criteria();
      $criteria->addJoin(self::ID, SaleAccountPeer::SALES_ID);

      $criteria->add(SaleAccountPeer::ACCOUNT_ID, $account_id);

      if($id_state_menor)
      {
	 $criteria->add(SaleAccountPeer::ID_STATE, $id_state_menor, Criteria::LESS_THAN);
      }

      $criteria->addGroupByColumn(self::ID);

      if($all)
      {
	 if($amount)
	 {
	    $criteria->add(SaleAccountPeer::AMOUNT, $amount, Criteria::LESS_THAN);
	 }

	 return self::doSelect($criteria);
      } else {
	 if($amount)
	 {
	    $criteria->add(SaleAccountPeer::AMOUNT, $amount, Criteria::EQUAL);
	 }

	 return self::doSelectOne($criteria);
      }
   }



   public static function getIsAccount($sales_id, $is_pay = null)
   {
      $criteria = new Criteria();

      $criteria->add(self::ID, $sales_id);
      $criteria->addJoin(self::ID, SaleAccountPeer::SALES_ID);

      if($is_pay)
      {
	 $criteria->add(SaleAccountPeer::ID_STATE, 1, Criteria::GREATER_THAN);
	 $criteria->addAnd(SaleAccountPeer::ID_STATE, 3, Criteria::LESS_EQUAL);
      }

      return self::doSelectOne($criteria);
   }


   public static function isDirectSelling($sales_id, $is_pay = null)
   {
      $criteria = new Criteria();

      $criteria->add(self::ID, $sales_id);

      $criteria->addJoin(self::ID, SaleAccountPeer::SALES_ID, Criteria::LEFT_JOIN);
      $criteria->add(SaleAccountPeer::SALES_ID, Null, Criteria::ISNULL);

      if($is_pay)
      {
	 $criteria->add(self::ID_STATE, 2);
      }

      return self::doSelectOne($criteria);
   }


   public static function getIsNotPay($sales_id)
   {
      $criteria = new Criteria();

      $criteria->add(self::ID, $sales_id);
      $criteria->addJoin(self::ID, SaleAccountPeer::SALES_ID);

      $criteria->add(SaleAccountPeer::ID_STATE, 1);


      return self::doSelectOne($criteria);
   }


   public static function getSalesByCashierOpen($cashier_id)
   {
      $criteria = new Criteria();
      $criteria->add(self::CASHIER_ID, $cashier_id);
      $criteria->add(self::ID_STATE, 1);

      return self::doSelectOne($criteria);
   }

   public static function getMovementCashbox($sales_id)
   {
      $criteria = new Criteria();

      $criteria->addJoin(self::ID, MovementCashboxSalesPeer::SALES_ID);
      $criteria->addJoin(MovementCashboxSalesPeer::MOVEMENT_CASHBOX_ID, MovementCashboxPeer::ID);
      $criteria->add(self::ID, $sales_id);

      $criteria->addGroupByColumn(MovementCashboxPeer::ID);

      return MovementCashboxPeer::doSelect($criteria);
   }



   public static function IsPayForContract($sales_id)
   {
      $criteria = new Criteria();

      $criteria->add(self::ID, $sales_id);
      $criteria->addJoin(self::ID, SaleAccountPeer::SALES_ID);

      $criteria->addAnd(SaleAccountPeer::ID_STATE, 3);


      return self::doSelectOne($criteria);
   }

   public static function getCurrencyBySales($sales_id, $currency_id)
   {
      $r = false;

      $criteria = new Criteria();
      $criteria->addJoin(self::ID, MovementCashboxSalesPeer::SALES_ID);
      $criteria->addJoin(MovementCashboxSalesPeer::MOVEMENT_CASHBOX_ID, MovementCashboxPeer::ID);
      $criteria->addJoin(MovementCashboxPeer::CURRENCY_PRICE_ID, CurrencyPricePeer::ID);
      $criteria->add(self::ID, $sales_id);
      $criteria->add(CurrencyPricePeer::CURRENCY_ID, $currency_id);

      $sales = self::doSelectOne($criteria);

      if(is_object($sales))
      {
	 $r = true;
      }

      return $r;
   }


   public static function getTotalMensualidadReporte($period_id, $grade_id, $nro_mes)
   {
        $query = "
	 SELECT
	    sch_item_for_sale.`price`,
	    sch_item_for_sale.`quantity`,
	    sch_item_for_sale.`discount`
	 FROM sch_item_for_sale
	 INNER JOIN sch_item ON sch_item_for_sale.`item_id` = sch_item.`id`
	 INNER JOIN sch_sales ON sch_item_for_sale.`sales_id` = sch_sales.`id`
	 INNER JOIN sch_sale_account ON sch_sales.`id` = sch_sale_account.`sales_id`
	 INNER JOIN sch_account ON sch_sale_account.`account_id` = sch_account.`id`
	 INNER JOIN sch_contract ON sch_account.`contract_id` = sch_contract.`id`
	 INNER JOIN sch_contract_grade ON sch_contract.`id` = sch_contract_grade.`contract_id`
	 WHERE sch_item.`type_item_id` = 2
	 AND sch_account.`number` = {$nro_mes}
	 AND sch_contract_grade.`grade_id` = {$grade_id}
	 AND sch_contract.`period_id` = {$period_id}
         AND sch_contract_grade.`id_state` = 2
	 GROUP BY sch_item_for_sale.`id`
      ";

      $con = Propel::getConnection();
      $obj = $con->prepare($query);
      $obj->execute();

      $item_for_sales_array = $obj->fetchAll();

      $total_mensualidad = 0;
      $total_discount = 0;
      $total_credito = 0;

      foreach ($item_for_sales_array as $item_for_sales)
      {
	$total_mensualidad += ($item_for_sales['price'] * $item_for_sales['quantity']);
	$total_discount += ($item_for_sales['discount'] * $item_for_sales['quantity']);
	$total_credito = ($total_mensualidad - $total_discount);
      }

      return array($total_mensualidad, $total_discount, $total_credito);
   }


   public static function getTotalMoraReporte($period_id, $grade_id, $nro_mes)
   {
        $query = "
	 SELECT
	    sch_item_for_sale.`price`,
	    sch_item_for_sale.`quantity`,
	    sch_item_for_sale.`discount`
	 FROM sch_item_for_sale
	 INNER JOIN sch_item ON sch_item_for_sale.`item_id` = sch_item.`id`
	 INNER JOIN sch_sales ON sch_item_for_sale.`sales_id` = sch_sales.`id`
	 INNER JOIN sch_sale_account ON sch_sales.`id` = sch_sale_account.`sales_id`
	 INNER JOIN sch_account ON sch_sale_account.`account_id` = sch_account.`id`
	 INNER JOIN sch_contract ON sch_account.`contract_id` = sch_contract.`id`
	 INNER JOIN sch_contract_grade ON sch_contract.`id` = sch_contract_grade.`contract_id`
	 WHERE sch_item.`type_item_id` = 1
	 AND sch_account.`number` = {$nro_mes}
	 AND sch_contract_grade.`grade_id` = {$grade_id}
	 AND sch_contract.`period_id` = {$period_id}
         AND sch_contract_grade.`id_state` = 2
	 GROUP BY sch_item_for_sale.`id`
      ";

      $con = Propel::getConnection();
      $obj = $con->prepare($query);
      $obj->execute();

      $item_for_sales_array = $obj->fetchAll();

      $total_mensualidad = 0;
      $total_discount = 0;
      $total_credito = 0;

      foreach ($item_for_sales_array as $item_for_sales)
      {
	$total_mensualidad += ($item_for_sales['price'] * $item_for_sales['quantity']);
	$total_discount += ($item_for_sales['discount'] * $item_for_sales['quantity']);
	$total_credito = ($total_mensualidad - $total_discount);
      }

      return array($total_mensualidad, $total_discount, $total_credito);
   }

   public static function getTotalItemReporte($period_id, $grade_id, $nro_mes, $item_id)
   {
        $query = "
	 SELECT
	    sch_item_for_sale.`price`,
	    sch_item_for_sale.`quantity`,
	    sch_item_for_sale.`discount`
	 FROM sch_item_for_sale
	 INNER JOIN sch_item ON sch_item_for_sale.`item_id` = sch_item.`id`
	 INNER JOIN sch_sales ON sch_item_for_sale.`sales_id` = sch_sales.`id`
	 INNER JOIN sch_sale_account ON sch_sales.`id` = sch_sale_account.`sales_id`
	 INNER JOIN sch_account ON sch_sale_account.`account_id` = sch_account.`id`
	 INNER JOIN sch_contract ON sch_account.`contract_id` = sch_contract.`id`
	 INNER JOIN sch_contract_grade ON sch_contract.`id` = sch_contract_grade.`contract_id`
	 WHERE sch_item.id = {$item_id}
	 AND sch_account.`number` = {$nro_mes}
	 AND sch_contract_grade.`grade_id` = {$grade_id}
	 AND sch_contract.`period_id` = {$period_id}
         AND sch_contract_grade.`id_state` = 2
	 GROUP BY sch_item_for_sale.`id`
      ";

      $con = Propel::getConnection();
      $obj = $con->prepare($query);
      $obj->execute();

      $item_for_sales_array = $obj->fetchAll();

      $total_mensualidad = 0;

      foreach ($item_for_sales_array as $item_for_sales)
      {
	$total_mensualidad += (($item_for_sales['price'] - $item_for_sales['discount'] ) * $item_for_sales['quantity']);
      }

      return $total_mensualidad;
   }

   public static function getTotalMoraReportePagada($period_id, $grade_id, $nro_mes, $from_date = null, $to_date = null)
   {
        $query_date = '';
        if($from_date && $to_date)
	{
	   $query_date = " AND (sch_night_audit.`date` >= '$from_date' AND sch_night_audit.`date` <= '$to_date')";
	} else {
	   if($from_date)
	   {
	      $query_date = " AND sch_night_audit.`date` >= '$from_date'";
	   } else if($to_date) {
	      $query_date = " AND sch_night_audit.`date` <= '$to_date'";
	   }
	}



        $query = "
	 SELECT
	    sch_sales_deposit.`amount` AS amount
	 FROM
           sch_sales_deposit
            INNER JOIN sch_deposit ON sch_deposit.`id` = sch_sales_deposit.`deposit_id`
            INNER JOIN sch_movement_cashbox_deposit ON sch_movement_cashbox_deposit.`deposit_id`= sch_deposit.`id`
            INNER JOIN sch_movement_cashbox ON sch_movement_cashbox.`id` = sch_movement_cashbox_deposit.`movement_cashbox_id`
            INNER JOIN sch_cashbox ON sch_movement_cashbox.`cashbox_id` = sch_cashbox.`id`
            INNER JOIN sch_night_audit ON sch_cashbox.`night_audit_id` = sch_night_audit.`id`

            INNER JOIN sch_sales ON sch_sales_deposit.`sales_id` = sch_sales.`id`
            INNER JOIN sch_sale_account  ON sch_sales.`id` = sch_sale_account.`sales_id`
            INNER JOIN sch_account ON sch_sale_account.`account_id` = sch_account.`id`
            INNER JOIN sch_contract ON sch_account.`contract_id` = sch_contract.`id`
            INNER JOIN sch_contract_grade ON sch_contract.`id` = sch_contract_grade.`contract_id`

            INNER JOIN sch_item_for_sale ON sch_sales.`id` = sch_item_for_sale.`sales_id`
            INNER JOIN sch_item ON sch_item_for_sale.`item_id` = sch_item.`id`

	 WHERE sch_item.`type_item_id` = 1
         AND sch_contract_grade.`id_state` = 2
	 AND sch_account.`number` = {$nro_mes}
	 AND sch_contract_grade.`grade_id` = {$grade_id}
	 AND sch_contract.`period_id` = {$period_id} {$query_date}

         GROUP BY sch_sales_deposit.`id`
      ";

      $con = Propel::getConnection();
      $obj = $con->prepare($query);
      $obj->execute();

      $item_for_sales_array = $obj->fetchAll();

      $total = 0;
      foreach ($item_for_sales_array as $item_for_sales)
      {
	$total += $item_for_sales['amount'];
      }

      return $total;
   }




   public static function getTotalMensualidadReportePagada($period_id, $grade_id, $nro_mes, $type_item_id, $from_date = null, $to_date = null)
   {
        $query_date = '';
        if($from_date && $to_date)
	{
	   $query_date = " AND (sch_night_audit.`date` >= '$from_date' AND sch_night_audit.`date` <= '$to_date')";
	} else {
	   if($from_date)
	   {
	      $query_date = " AND sch_night_audit.`date` >= '$from_date'";
	   } else if($to_date) {
	      $query_date = " AND sch_night_audit.`date` <= '$to_date'";
	   }
	}


        $query = "
	 SELECT
	    sch_sales_deposit.`amount` AS amount
	 FROM
	   sch_sales_deposit
            INNER JOIN sch_deposit ON sch_deposit.`id` = sch_sales_deposit.`deposit_id`
            INNER JOIN sch_movement_cashbox_deposit ON sch_movement_cashbox_deposit.`deposit_id`= sch_deposit.`id`
            INNER JOIN sch_movement_cashbox ON sch_movement_cashbox.`id` = sch_movement_cashbox_deposit.`movement_cashbox_id`
            INNER JOIN sch_cashbox ON sch_movement_cashbox.`cashbox_id` = sch_cashbox.`id`
            INNER JOIN sch_night_audit ON sch_cashbox.`night_audit_id` = sch_night_audit.`id`


            INNER JOIN sch_sales ON sch_sales_deposit.`sales_id` = sch_sales.`id`
            INNER JOIN sch_sale_account  ON sch_sales.`id` = sch_sale_account.`sales_id`
            INNER JOIN sch_account ON sch_sale_account.`account_id` = sch_account.`id`
            INNER JOIN sch_contract ON sch_account.`contract_id` = sch_contract.`id`
            INNER JOIN sch_contract_grade ON sch_contract.`id` = sch_contract_grade.`contract_id`

            INNER JOIN sch_item_for_sale ON sch_sales.`id` = sch_item_for_sale.`sales_id`
            INNER JOIN sch_item ON sch_item_for_sale.`item_id` = sch_item.`id`

           WHERE
           sch_item.`type_item_id` = $type_item_id
           AND sch_contract_grade.`grade_id` = {$grade_id}
           AND sch_account.`number` = {$nro_mes}
           AND sch_contract_grade.`id_state` = 2
           AND sch_contract.`period_id` = {$period_id} {$query_date}

           GROUP BY sch_sales_deposit.`id`
      ";

      $con = Propel::getConnection();
      $obj = $con->prepare($query);
      $obj->execute();

      $item_for_sales_array = $obj->fetchAll();

      $total = 0;

      foreach ($item_for_sales_array as $item_for_sales)
      {
	$total += $item_for_sales['amount'];
      }

      return $total;
   }


   public static function getTotalItemReportePagada($period_id, $grade_id, $nro_mes, $item_id, $from_date = null, $to_date = null)
   {
        $query_date = '';

        if($from_date && $to_date)
	{
	   $query_date = " AND (sch_night_audit.`date` >= '$from_date' AND sch_night_audit.`date` <= '$to_date')";
	} else {
	   if($from_date)
	   {
	      $query_date = " AND sch_night_audit.`date` >= '$from_date'";
	   } else if($to_date) {
	      $query_date = " AND sch_night_audit.`date` <= '$to_date'";
	   }
	}


        $query = "
	 SELECT
	    sch_sales_deposit.`amount` AS amount
	 FROM
	   sch_sales_deposit
            INNER JOIN sch_deposit ON sch_deposit.`id` = sch_sales_deposit.`deposit_id`
            INNER JOIN sch_movement_cashbox_deposit ON sch_movement_cashbox_deposit.`deposit_id`= sch_deposit.`id`
            INNER JOIN sch_movement_cashbox ON sch_movement_cashbox.`id` = sch_movement_cashbox_deposit.`movement_cashbox_id`
            INNER JOIN sch_cashbox ON sch_movement_cashbox.`cashbox_id` = sch_cashbox.`id`
            INNER JOIN sch_night_audit ON sch_cashbox.`night_audit_id` = sch_night_audit.`id`

            INNER JOIN sch_sales ON sch_sales_deposit.`sales_id` = sch_sales.`id`
            INNER JOIN sch_sale_account  ON sch_sales.`id` = sch_sale_account.`sales_id`
            INNER JOIN sch_account ON sch_sale_account.`account_id` = sch_account.`id`
            INNER JOIN sch_contract ON sch_account.`contract_id` = sch_contract.`id`
            INNER JOIN sch_contract_grade ON sch_contract.`id` = sch_contract_grade.`contract_id`

            INNER JOIN sch_item_for_sale ON sch_sales.`id` = sch_item_for_sale.`sales_id`
            INNER JOIN sch_item ON sch_item_for_sale.`item_id` = sch_item.`id`

	 WHERE
          sch_item.`id` = {$item_id}
	 AND sch_contract_grade.`grade_id` = {$grade_id}
         AND sch_account.`number` = {$nro_mes}
         AND sch_contract_grade.`id_state` = 2
	 AND sch_contract.`period_id` = {$period_id}{$query_date}

         GROUP BY sch_sales_deposit.`id`
      ";



      $con = Propel::getConnection();
      $obj = $con->prepare($query);
      $obj->execute();

      $item_for_sales_array = $obj->fetchAll();

      $total = 0;

      foreach ($item_for_sales_array as $item_for_sales)
      {
	$total += $item_for_sales['amount'];
      }

      return $total;
   }


   public static function getAmountIngreso($period_id, $from_date, $to_date )
   {
       $query = "
           SELECT
	    sch_sales_deposit.`amount` AS amount
	    ,sch_account.`number`
	    ,sch_contract_grade.`grade_id` as grade_id
	    ,sch_item.`id` as item_id
            ,sch_item.`type_item_id` as type_item_id
	 FROM
	   sch_sales_deposit
            INNER JOIN sch_deposit ON sch_deposit.`id` = sch_sales_deposit.`deposit_id`
            INNER JOIN sch_movement_cashbox_deposit ON sch_movement_cashbox_deposit.`deposit_id`= sch_deposit.`id`
            INNER JOIN sch_movement_cashbox ON sch_movement_cashbox.`id` = sch_movement_cashbox_deposit.`movement_cashbox_id`
            INNER JOIN sch_cashbox ON sch_movement_cashbox.`cashbox_id` = sch_cashbox.`id`
            INNER JOIN sch_night_audit ON sch_cashbox.`night_audit_id` = sch_night_audit.`id`

            INNER JOIN sch_movement_cashbox_receipt ON sch_movement_cashbox_deposit.`movement_cashbox_id` = sch_movement_cashbox_receipt.`movement_cashbox_id`

            INNER JOIN sch_sales ON sch_sales_deposit.`sales_id` = sch_sales.`id`
            INNER JOIN sch_sale_account  ON sch_sales.`id` = sch_sale_account.`sales_id`
            INNER JOIN sch_account ON sch_sale_account.`account_id` = sch_account.`id`
            INNER JOIN sch_contract ON sch_account.`contract_id` = sch_contract.`id`
            INNER JOIN sch_contract_grade ON sch_contract.`id` = sch_contract_grade.`contract_id`

            INNER JOIN sch_item_for_sale ON sch_sales.`id` = sch_item_for_sale.`sales_id`
            INNER JOIN sch_item ON sch_item_for_sale.`item_id` = sch_item.`id`
        WHERE
           sch_contract_grade.`id_state` = 2
		   AND sch_contract.`period_id` = {$period_id}
           AND (sch_night_audit.`date` >= '{$from_date}'  AND sch_night_audit.`date` <= '{$to_date}')

           GROUP BY sch_sales_deposit.`id`
        ";
           //

        $con = Propel::getConnection();
        $obj = $con->prepare($query);
        $obj->execute();

        return $obj->fetchAll();
   }

} // SalesPeer
