<?php


/**
 * Skeleton subclass for representing a row from the 'sch_account' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Sep 12 01:53:15 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.student
 */
class Account extends BaseAccount {

   /**
   * Retorna el nombre del estado de la session
   * 
   * @return String
   */
   public function getStateName()
   {
       $r = '';    
       $value = $this->getIdState();
       switch ($value) {
	  case 1:
	     $r = 'Abierto';
	     break;
	  case 2:
	     $r = 'Cerrado';
	     break;
	  case 3:
	     $r = 'Anulado';
	     break;
	  case 4:
	     $r = 'Eliminado';
	     break;
       }
    
    return $r;
   }
   
   /**
    * Devuelve el total de lo que se debe en esta cuenta
    * @return Float
    */
   public function getTotalDeuda()
   {
      return AccountPeer::getTotalDeuda($this->getId());
   }
   
   /**
    *
    * @return Float
    */
   public function getTotalPago()
   {
      return AccountPeer::getTotalPago($this->getId());
   }   
   
   public function getSaldo()
   {
      return ($this->getTotalDeuda() - $this->getTotalPago());
   }
   
   public function saveMora($price, $dias, $con = null)
   {
      $item_for_sale = AccountPeer::getMoraSinPago($this->getId());
      
      if(!is_object($item_for_sale))
      {
	 $sales = new Sales();
	 $sales->setIdState(2);
	 $sales->setCashierId(1);
	 $sales->setNumber(1);
	 $sales->save();

	 $item_for_sale = new ItemForSale();
	 $item_for_sale->setSalesId($sales->getId());
	 $item_for_sale->setName('MORA'.' '.$dias.' Dias');
	 $item_for_sale->setItemId(1);
	 $item_for_sale->setPrice($price);
	 $item_for_sale->setQuantity(1);
	 $item_for_sale->save($con);

	 $sales_account = new SaleAccount();
	 $sales_account->setAmount($price);
	 $sales_account->setIdState(1);
	 $sales_account->setSalesId($sales->getId());
	 $sales_account->setAccountId($this->getId());
	 $sales_account->save($con);
	 
      } else {// number_format($price, 2, '.', '')
	 $item_for_sale->setName('MORA'.' '.$dias.' Dias');
	 $item_for_sale->setPrice($price);
	 $item_for_sale->save($con);
      }
      
   }
   
   
  
   
   
   
  public static function getAllPromotersByBirdate($limit = null)
  { 
        $query = "
        SELECT 
          tbl_promoter.id as promoter_id,
          tbl_promoter.CLIENT_ID, 
          tbl_person.`id` as person_id,
          tbl_person.`birth_date`, 
          tbl_client.`first_name`,
          tbl_client.`last_name`,
          tbl_promoter.ID_SPONSOR
          FROM `tbl_promoter`, `tbl_client`, `tbl_person` 
          WHERE tbl_promoter.DELETED_AT IS NULL 
          AND tbl_promoter.CLIENT_ID = tbl_client.ID 
          AND tbl_client.ID=tbl_person.CLIENT_ID
          GROUP BY tbl_promoter.id
          ORDER BY tbl_person.birth_date
      ";
           
    
      $con = Propel::getConnection();
      $obj = $con->prepare($query);
      $obj->execute();
      
      $promoters_array = $obj->fetchAll();
      
      // filtrar los promotores que pertenecen a su red
      $tree = MultiNodePeer::getMultiNodesByUserId(sfContext::getInstance()->getUser()->getId());

      $branch = $tree->getBranch();

      $promoters = array();
      foreach ($promoters_array as $promoter)
      {
        $tree_node = MultiNodePeer::getMultiNodesByPromoterId($promoter['promoter_id']);
        if(in_array($tree_node, $branch))
        {
          $promoters[] = $promoter;
        }
      }
      return $promoters;
  }
   
   
   
} // Account
