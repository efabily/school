<?php


/**
 * Skeleton subclass for performing query and update operations on the 'sch_sales_deposit' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu Oct  4 23:51:29 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.student
 */
class SalesDepositPeer extends BaseSalesDepositPeer {
   
   /**
    *
    * @param Int $id_state
    * @param Int $deposit_id
    * @param Int $sales_id
    * @param Boolean $all
    * @return SalesDeposit  || SalesDeposits
    */
   public static function getSalesDeposit($id_state = null, $deposit_id = null, $sales_id = null, $all = null)
   {
      $criteria = new Criteria();
      
      if($id_state)
      {
	 $criteria->add(self::ID_STATE, $id_state);
      }
      
      if($deposit_id)
      {
	 $criteria->add(self::DEPOSIT_ID, $deposit_id);
      }
      
      if($sales_id)
      {
	 $criteria->add(self::SALES_ID, $sales_id);
      }
      
      if($all)
      {
	 return self::doSelect($criteria);
      } else {
	 return self::doSelectOne($criteria);
      }
   }
   
   /**
    *
    * @param Int $id_state
    * @param Int $deposit_id
    * @param Int $sales_id
    * @param PropelPDO $con
    * @return SalesDeposit 
    */
   public static function saveSalesDeposit($id_state, $amount, $deposit_id, $sales_id, $sales_deposit = null, $con = null)
   {
      if(!is_object($sales_deposit))
      {
	$sales_deposit = new SalesDeposit(); 
      }
      
      $sales_deposit->setIdState($id_state);
      $sales_deposit->setAmount($amount);
      $sales_deposit->setDepositId($deposit_id);
      $sales_deposit->setSalesId($sales_id);
      $sales_deposit->save($con);
      
      return $sales_deposit;      
   }
   
   
   public static function getSalesDepositByDeposit($deposit_id)
   {
      $criteria = new Criteria();
      
      $criteria->add(self::DEPOSIT_ID, $deposit_id);
      
      $criteria->addGroupByColumn(self::ID);
      
      return self::doSelect($criteria);      
   }
   
   public static function getTotalSales($deposit_id)
   {
      $total = 0;
      
      $sales_deposits = self::getSalesDepositByDeposit($deposit_id);
      
      foreach ($sales_deposits as $sales_deposit)
      {
	 $total += $sales_deposit->getAmount();
      }
      
      return $total;
   }
   
   /**
    * Este metodo crea un sales_deposit y le cambia de estado a un sales_account
    */
   public static function saveSalesDepositAndAccont($id_state_sa, $amount, $deposit_id, $sales_id, $con = null)
   {
       $r = false;
      
       $sales_deposit = SalesDepositPeer::saveSalesDeposit(3, $amount, $deposit_id, $sales_id, null, $con);
       if(is_object($sales_deposit) && $sales_deposit->getId() > 0)
       {
	  // Buscamos el Sales Account
	  // Buscamos para el sales sus SalesAccount
	  // $sales_account = SaleAccountPeer::getSaleAccountBySaleAndAccount($sales_id, $account_id); 
	  $sales_account = SaleAccountPeer::getSaleAccountBySaleAndAccount($sales_id);
	  if(is_object($sales_account))
	  {
	     $sales_account->setIdState($id_state_sa);
	     $sales_account->save($con);
	     $r = true;
	  }
       }

       return $r;
   }
   
   /**
    * 
    */
   public static function getTotalBySales($sales_id, $id_state = null)
   {
      $total = 0;
      
      $criteria = new Criteria();
      
      $criteria->add(self::SALES_ID, $sales_id);
      
      if($id_state)
      {
	 $criteria->add(self::ID_STATE,$id_state);
      }
      
      $criteria->addGroupByColumn(self::ID);
      
      $sales_deposits = self::doSelect($criteria);
      
      foreach ($sales_deposits as $sales_deposit)
      {
	 $total += $sales_deposit->getAmount();
      }
      
      return $total;
   }
   
   public static function getSalesDepositByReceipt($receipt_id, $sales_id)
   {
      $criteria = new Criteria();      
      $criteria->addJoin(self::DEPOSIT_ID, DepositPeer::ID);
      $criteria->addJoin(DepositPeer::ID, MovementCashboxDepositPeer::DEPOSIT_ID);
      $criteria->addJoin(MovementCashboxDepositPeer::MOVEMENT_CASHBOX_ID, MovementCashboxReceiptPeer::MOVEMENT_CASHBOX_ID);
      
      $criteria->add(MovementCashboxReceiptPeer::RECEIPT_ID, $receipt_id);
      $criteria->add(self::SALES_ID, $sales_id);
      
      $criteria->addGroupByColumn(self::ID);
      
      return self::doSelectOne($criteria);
   }
} // SalesDepositPeer
