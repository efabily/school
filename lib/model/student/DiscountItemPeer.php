<?php


/**
 * Skeleton subclass for performing query and update operations on the 'sch_discount_item' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Fri Sep 28 00:21:36 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.student
 */
class DiscountItemPeer extends BaseDiscountItemPeer {
   
   public static function saveDiscountItem($data, $discount_item = null,  $con = null)
   {
      if(!is_object($discount_item))
      {
	 $discount_item = new DiscountItem();
      }
      
      PropertySetter::set($discount_item, $data);
      
      $discount_item->save($con);
      
      return $discount_item;
   }
   
   public static function getDiscountByItem($item_id, $discount_id, $id_state = null)
   {
      $criteria = new Criteria();
      
      $criteria->add(self::ITEM_ID, $item_id);
      $criteria->add(self::DISCOUNT_ID, $discount_id);
      
      if($id_state)
      {
	 $criteria->add(self::ID_STATE, $id_state);
      }
      
      return self::doSelectOne($criteria);
   }
   
   public static function getDiscountItem($item_id = null, $discount_id = null, $id_state = null)
   {
      $array_discount_item = array();
      
      $criteria = new Criteria();
      
      if($item_id)
      {
	 $criteria->add(self::ITEM_ID, $item_id);
      }
      
      if($discount_id)
      {
	 $criteria->add(self::DISCOUNT_ID, $discount_id);
      }
      
      if($id_state)
      {
	 $criteria->add(self::ID_STATE, $id_state);
      }
      
      return self::doSelect($criteria);
   }
   
   public static function getArrayDiscountItem($item_id = null, $discount_id = null, $id_state = null)
   {
      $array_discount_item = array();
      
      $discount_items = self::getDiscountItem($item_id, $discount_id, $id_state);
            
      foreach ($discount_items as $discount_item)
      {
	 $array_discount_item[] = $discount_item->getDiscountId();
      }
      
      return $array_discount_item;
   }
   
   public static function deleteByItem($item_id = null, $con = null)
   {
      $discount_items = self::getDiscountItem($item_id, null, 2);
      
      foreach ($discount_items as $discount_item)
      {
	 $discount_item->changeStateId(3, $con);
      }
   }
   

} // DiscountItemPeer
