<?php


/**
 * Skeleton subclass for performing query and update operations on the 'sch_deposit' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Fri Sep 28 00:21:35 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.student
 */
class DepositPeer extends BaseDepositPeer {

   /**
    * Devulve un deposito abierto para un contrato
    * @param Int $id_state
    * @param Int $account_id
    * @return Deposit || Deposits
    */
   public static function getDeposit($id_state = null, $contract_id = null, $sf_guard_user_id = null, $all = null)
   {
      $criteria = new Criteria();
      
      if($id_state)
      {
	 $criteria->add(self::ID_STATE, $id_state);
      }
      
      if($contract_id)
      {
	 $criteria->addJoin(self::ID, AccountDepositPeer::DEPOSIT_ID);
	 $criteria->addJoin(AccountDepositPeer::ACCOUNT_ID, AccountPeer::ID);
	 $criteria->add(AccountPeer::CONTRACT_ID, $contract_id);
      }
      
      if($sf_guard_user_id)
      {
	 $criteria->add(self::CASHIER_ID, $sf_guard_user_id);
      }
      
      if($all)
      {
	 return self::doSelec($criteria);
      } else {
	 return self::doSelectOne($criteria);
      }
      
   }
   
   public static function saveDeposit($data, $deposit = null,  $con = null)
   {
      if(!is_object($deposit))
      {
	 $deposit = new Deposit();
      }
      
      PropertySetter::set($deposit, $data);
      
      $deposit->save($con);
      
      return $deposit;
   }
   
   
   
   public static function getMovementCashbox($deposit_id)
   {
      $criteria = new Criteria();
      
      $criteria->addJoin(self::ID, MovementCashboxDepositPeer::DEPOSIT_ID);
      $criteria->addJoin(MovementCashboxDepositPeer::MOVEMENT_CASHBOX_ID, MovementCashboxPeer::ID);
      $criteria->add(self::ID, $deposit_id);
            
      return MovementCashboxPeer::doSelect($criteria);
   }
   
   
  /**
   *
   * @param Int $movement_cashbox_id
   * @param PropelPDp $con
   * @return boolean 
   */ 
  public static function delMovements($movement_cashbox_id, $con = null)
  {
    $r = false;
    // Obtenemos el movimiento que se quiere eliminar
    $movement_cashbox = MovementCashboxPeer::retrieveByPK($movement_cashbox_id);
        
    if(is_object($movement_cashbox))
    { // Si existe este movimiento, buscamos su MovementCashboxContractCurrency
      $movement_cashbox_deposit = MovementCashboxDepositPeer::getMovementCashboxDepositByMovementCashboxId($movement_cashbox->getId());

      if(is_object($movement_cashbox_deposit))
      {// Si existe este movimientos, lo eliminamos
        $movement_cashbox_deposit->delete($con);
        // Eliminamos el MovementCashbox
        $movement_cashbox->delete($con);
        $r = true;
      }
    }
    
    return $r;    
  }
  
  public static function getDepositByState($id_state, $contract_id = null)
  {
     $criteria = new Criteria();
     
     $criteria->add(self::ID_STATE, $id_state);
     
     if($account_id)
     {
	$criteria->addJoin(self::ID, AccountDepositPeer::DEPOSIT_ID);
	$criteria->addJoin(AccountDepositPeer::ACCOUNT_ID, AccountPeer::ID);
	$criteria->add(AccountPeer::CONTRACT_ID, $contract_id);
     }
     
     $criteria->addGroupByColumn(self::ID);
     
     return self::doSelect($criteria);
  }
  
  
  public static function getDepositByAccountId($account_id, $id_state = null)
  {
     $criteria = new Criteria();
     $criteria->addJoin(self::ID, AccountDepositPeer::DEPOSIT_ID);
     
     $criteria->add(AccountDepositPeer::ACCOUNT_ID, $account_id);
              
     $criteria->add(self::ID_STATE, 2);
     $criteria->addOr(self::ID_STATE, 3);
     
     $criteria->addGroupByColumn(self::ID);
     
     return self::doSelect($criteria);
     
  }
  
  public static function getDepositByCashboxId($cashbox_id)
  {
     $criteria = new Criteria();
     
     $criteria->addJoin(self::ID, MovementCashboxDepositPeer::DEPOSIT_ID);
     $criteria->addJoin(MovementCashboxDepositPeer::MOVEMENT_CASHBOX_ID, MovementCashboxPeer::ID);
     $criteria->add(MovementCashboxPeer::CASHBOX_ID, $cashbox_id);
     $criteria->addGroupByColumn(self::ID);
     
     return self::doSelect($criteria);
  }
  
  
  
//  /**
//   * Elimina los movimientos, 
//   * relacionado con el contractCurrency
//   * 
//   * @param Int $movement_cashbox_id
//   * @param PropelPDO $con
//   * @return boolean 
//   */
//  public static function delMovements($movement_cashbox_id, $con = null)
//  {
//    $r = false;
//    // Obtenemos el movimiento que se quiere eliminar
//    $movement_cashbox = MovementCashboxPeer::retrieveByPK($movement_cashbox_id);
//        
//    if(is_object($movement_cashbox))
//    { // Si existe este movimiento, buscamos su MovementCashboxDeposit
//      $movement_cashbox_deposit = MovementCashboxDepositPeer::getMovementCashboxDepositByMovementCashboxId($movement_cashbox->getId());
//
//      if(is_object($movement_cashbox_deposit))
//      {// Si existe este movimientos, lo eliminamos
//        $movement_cashbox_deposit->delete($con);
//        // Eliminamos el MovementCashbox
//        $movement_cashbox->delete($con);
//        $r = true;
//      }
//    }
//    
//    return $r;    
//  }

   public static function getCurrencyByDeposit($deposit_id, $currency_id)
   {
      $r = false;
      
      $criteria = new Criteria();
      $criteria->addJoin(self::ID, MovementCashboxDepositPeer::DEPOSIT_ID);
      $criteria->addJoin(MovementCashboxDepositPeer::MOVEMENT_CASHBOX_ID, MovementCashboxPeer::ID);
      $criteria->addJoin(MovementCashboxPeer::CURRENCY_PRICE_ID, CurrencyPricePeer::ID);
      $criteria->add(self::ID, $deposit_id);
      
      $criteria->add(CurrencyPricePeer::CURRENCY_ID, $currency_id);
      
      $sales = self::doSelectOne($criteria);
      
      if(is_object($sales))
      {
	 $r = true;
      }
      
      return $r;
   }
   
   public static function getReceipt($deposit_id)
   {
      $criteria = new Criteria();
      
      $criteria->addJoin(self::ID, MovementCashboxDepositPeer::DEPOSIT_ID);
      $criteria->addJoin(MovementCashboxDepositPeer::MOVEMENT_CASHBOX_ID, MovementCashboxReceiptPeer::MOVEMENT_CASHBOX_ID);
      $criteria->addJoin(MovementCashboxReceiptPeer::RECEIPT_ID, ReceiptPeer::ID);
      $criteria->add(self::ID, $deposit_id);
      
      return ReceiptPeer::doSelectOne($criteria);
   }
   
   public static function getContract($deposit_id)
   {
      $criteria = new Criteria();
      $criteria->addJoin(self::ID, SalesDepositPeer::DEPOSIT_ID);
      $criteria->addJoin(SalesDepositPeer::SALES_ID, SalesPeer::ID);
      $criteria->addJoin(SalesPeer::ID, SaleAccountPeer::SALES_ID);
      $criteria->addJoin(SaleAccountPeer::ACCOUNT_ID, AccountPeer::ID);
      $criteria->addJoin(AccountPeer::CONTRACT_ID, ContractPeer::ID);
      $criteria->add(SalesDepositPeer::DEPOSIT_ID, $deposit_id);
      
      return ContractPeer::doSelectOne($criteria);
   }
   
  
   
} // DepositPeer