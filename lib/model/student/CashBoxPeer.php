<?php


/**
 * Skeleton subclass for performing query and update operations on the 'sch_cashbox' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Fri Sep 28 00:21:32 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.student
 */
class CashBoxPeer extends BaseCashBoxPeer {

 /**
  * Busca si el usuario actual 
  * tiene una caja abierta
  * 
  * @param int $sf_guard_user_id (sf_guard_user_profile)
  */
  public static function openForUser($sf_guard_user_id)
  {
    $criteria = new Criteria();   
    
    $criteria->add(self::CASHIER_ID, $sf_guard_user_id);
    
    $criteria->add(self::ID_STATE, 1);

    return self::doSelectOne($criteria);
  }
  
  /**
   * Abre una caja, 
   * para el usuario actualmente logueado
   * Se crea abierta(id_state = 1)
   *
   * @param Int $business_entity_id
   * @param Int $sf_guard_user_id
   * @param PropelPDO $con
   * @return CashBox 
   */
   public static function open($sf_guard_user_id, $con = null)
   {
      $night_audit = NightAuditPeer::getLastNightAudit();
      
      if(is_object($night_audit))
      {
	
      }
      
      $cashbox = self::createCashbox($sf_guard_user_id, $night_audit->getId(), 1, null, $con);           
      
      return $cashbox;
   }
   
  /**
   *
   * Obtiene o abre la caja a un usuario
   * 
   * @param Int $sf_guard_user_id
   * @param Int $cashbox_id
   * @param PropelPDO $con
   * @return Cashbox
   */
  public static function getCashbox($sf_guard_user_id = null, $cashbox_id = null, $con = null)
  {
    if ($cashbox_id)
    {
      $cashbox = self::retrieveByPK($cashbox_id);
    } else {
      $cashbox = self::openForUser($sf_guard_user_id);            
    }

    if (!isset($cashbox) || !is_object($cashbox))
    {
      $cashbox = CashBoxPeer::open($sf_guard_user_id, $con);
    }
    
    // CurrencyPeer::actualiceCupOfChange($con);
    
    return $cashbox;
  }
  
  
  /**
   * Crea un objeto de tipo CashBox,
   * Pasandole los campos necesarios
   *
   * @param Int $sf_guard_user_id
   * @param Int $night_audit_id
   * @param Int $id_satate (Default 1)
   * @param CashBox $cashbox || null
   * @param PropelPDO $con
   * @return CashBox 
   */
  public static function createCashbox($sf_guard_user_id, $night_audit_id, $id_satate = 1, $cashbox = null, $con = null)
  {      
     if(!is_object($cashbox))
     {
       $cashbox = new CashBox();
     }
     
     $cashbox->setCashierId($sf_guard_user_id);
     $cashbox->setNightAuditId($night_audit_id);
     $cashbox->setIdState($id_satate); 
     
     $cashbox->save($con);         
      
    return $cashbox;    
  }
  
  
  /**
   *
   * @param Criteria $criteria
   * @param Int $page
   * @param Int $list_max
   * @return sfPropelPager 
   */
  public static function getPager($criteria, $page = 1, $list_max = 20)
  {        
    $pager = new sfPropelPager('CashBox', $list_max);
    $pager->setCriteria($criteria);
    $pager->setPage($page);
    $pager->init();
        
    return $pager;    
  }
  
  /**
   *
   * @param Int $page
   * @param Int $list_max
   * @return sfPropelPager (CashBox) 
   */
  public static function getCashboxPager($filter = null, $business_entity_id = null, $page = null, $list_max = null)
  {
    $criteria = new Criteria();
    
    if(is_null($filter))
    {
      // buscar la ultima auditoria del business entity actual
      $night_audit = NightAuditPeer::getNightAuditByBusinessEntityId($business_entity_id);
      
      if(is_object($night_audit))
      {
        $criteria->add(self::NIGHT_AUDIT_ID, $night_audit->getId());
      }
      
    } else {
        if(isset($filter['cashier_id']) && !empty($filter['cashier_id']))
        {
          $criteria->add(self::CASHIER_ID, $filter['cashier_id']);
        }

        if(isset($filter['state']) && !empty($filter['state']))
        {
          $criteria->add(self::ID_STATE, $filter['state']);
        }

        if((isset($filter['from_date']) && !empty($filter['from_date'])) || (isset($filter['to_date']) && !empty($filter['to_date'])))
        {
          $criteria->addJoin(self::NIGHT_AUDIT_ID, NightAuditPeer::ID);

          $sfDateFrom = new sfDate($filter['from_date']);
          $criteria->addCond('cond1',NightAuditPeer::DATE, $sfDateFrom->dump(), Criteria::GREATER_EQUAL);

          $sfDateTo = new sfDate($filter['to_date']);
          $cond2 = $criteria->addCond('cond2',NightAuditPeer::DATE, $sfDateTo->dump(), Criteria::LESS_EQUAL);

          $criteria->combine(array('cond1', 'cond2'), Criteria::LOGICAL_AND);

        } 
        elseif(isset($filter['from_date']) && !empty($filter['from_date'])) 
        {
          $sfDateFrom = new sfDate($filter['from_date']);
          $criteria->add(NightAuditPeer::DATE, $sfDateFrom->dump(), Criteria::GREATER_EQUAL);

        } elseif(isset($filter['to_date']) && !empty($filter['to_date']))
        {
          $sfDateTo = new sfDate($filter['to_date']);
          $criteria->add(NightAuditPeer::DATE, $sfDateTo->dump(), Criteria::LESS_EQUAL);      
        }         
        
        $criteria->addJoin(self::NIGHT_AUDIT_ID, NightAuditPeer::ID);        
        $criteria->add(NightAuditPeer::BUSINESS_ENTITY_ID, $business_entity_id);        
    }
            
    return self::getPager($criteria, $page, $list_max);
  }
  
  
  /**
   * Devuelve todas las monedas 
   * que ha usado una caja
   * 
   * @param Int $cashbox_id
   * @return Currencys
   */
  public static function getAllCurrencys($cashbox_id)
  {
    $criteria = new Criteria();
    $criteria->addJoin(self::ID, MovementCashboxPeer::CASHBOX_ID);    
    $criteria->addJoin(MovementCashboxPeer::PAYMENT_TYPE_ID, PaymentTypePeer::ID);
    $criteria->addJoin(PaymentTypePeer::CURRENCY_ID, CurrencyPeer::ID);
    $criteria->add(self::ID, $cashbox_id);
    $criteria->setDistinct();

    return CurrencyPeer::doSelect($criteria);
  }
  
  
  
  /**
   * Devuelve todos los 
   * movimientos por dinero   
   * 
   * @param Int $cashbox_id
   * @param Int $currency_id
   * @param Int $accounting
   * @param String $func
   * @return MovementCashboxs
   */
  public static function getTotalMovementSales($cashbox_id = null , $currency_id = null, $accounting = null, $func = null)
  {
    $criteria = new Criteria();        
    
    $criteria->add(MovementCashboxPeer::CASHBOX_ID, $cashbox_id);
    $criteria->addJoin(MovementCashboxPeer::PAYMENT_TYPE_ID, PaymentTypePeer::ID);
    $criteria->add(PaymentTypePeer::CURRENCY_ID, $currency_id); 
    
    switch ($func)
    {
      case 'contract':
        $criteria->addJoin(MovementCashboxPeer::ID, MovementCashboxDepositPeer::MOVEMENT_CASHBOX_ID);
        $criteria->add(PaymentTypePeer::ACCOUNTING_RECORD, 1);
        $criteria->addGroupByColumn(MovementCashboxPeer::ID);
        break;
     case 'sales':
        $criteria->addJoin(MovementCashboxPeer::ID, MovementCashboxSalesPeer::MOVEMENT_CASHBOX_ID);
        $criteria->add(PaymentTypePeer::ACCOUNTING_RECORD, 1);
        $criteria->addGroupByColumn(MovementCashboxPeer::ID);
        break;
     case 'transfer':
        $criteria->addJoin(MovementCashboxPeer::ID, MovementCashboxTransferPeer::MOVEMENT_CASHBOX_ID);
        $criteria->add(PaymentTypePeer::ACCOUNTING_RECORD, 1);
        $criteria->addGroupByColumn(MovementCashboxPeer::ID);
        break;
    }
    
    $criteria->setDistinct();

    return MovementCashboxPeer::doSelect($criteria);
  }
  
  
  /**
   * Devuelve el total vendido en una moneda de una 
   * caja determinada
   * 
   * @param Int $cashbox_id
   * @param Int $currency_id
   * @param Int $accounting
   * @return Float
   */
  public static function getTotalMovement($cashbox_id = null, $currency_id = null, $accounting = null)
  {        
    $contracts  = self::getTotalMovementSales($cashbox_id, $currency_id, $accounting, 'contract');
    
    $sales  = self::getTotalMovementSales($cashbox_id, $currency_id, $accounting, 'sales');
    
    $transfers  = self::getTotalMovementSales($cashbox_id, $currency_id, $accounting, 'transfer');
       
    $amounts = array_merge($contracts, $sales, $transfers);
    
    $total = 0;
    $retiro = 0;
    $ingreso = 0;
    foreach($amounts as $amount)
    { 
      if($amount->getSum() < 0)
      {
	$retiro += ($amount->getSum() * -1);
      } else {
	$ingreso += $amount->getSum();
      }
      
      $total += $amount->getSum();
    }
    
    return array($total, $ingreso, $retiro);
  }
  
  
  /**
   *  Devuelve movimientos
   * 
   * @param Int $cashbox_id
   * @param String $func
   * @return MovementCashbox 
   */
  public static function getMovements($cashbox_id = null , $func = null)
  {
    $criteria = new Criteria();
    $criteria->add(MovementCashboxPeer::CASHBOX_ID, $cashbox_id);
    $criteria->add(MovementCashboxPeer::SUM, 0, Criteria::GREATER_THAN);
    $criteria->addJoin(MovementCashboxPeer::PAYMENT_TYPE_ID, PaymentTypePeer::ID);
    $criteria->addAscendingOrderByColumn(MovementCashboxPeer::PAYMENT_TYPE_ID);
    
    switch ($func)
    {
      case 'contract':

        $criteria->addJoin(MovementCashboxPeer::ID, MovementCashboxDepositPeer::MOVEMENT_CASHBOX_ID);
        $criteria->add(PaymentTypePeer::ACCOUNTING_RECORD, 1);
        $criteria->addGroupByColumn(MovementCashboxPeer::ID);
        break;
     case 'sales':

        $criteria->addJoin(MovementCashboxPeer::ID, MovementCashboxSalesPeer::MOVEMENT_CASHBOX_ID);
        $criteria->add(PaymentTypePeer::ACCOUNTING_RECORD, 1);
        $criteria->addGroupByColumn(MovementCashboxPeer::ID);
        break;
    }
    
    $criteria->setDistinct();
    
    return MovementCashboxPeer::doSelect($criteria);
  }
  
  
  /**
   * Devuelve el total por tipo de pago
   *
   * @param Int $cashbox_id
   * @param String $func
   * @return Array()
   */
  public static function getArrayMovements($cashbox_id = null, $func = null)
  {
    $movement_contracts = self::getMovements($cashbox_id, 'contract');
    
    $movement_sales = self::getMovements($cashbox_id, 'sales');
    
    
    $amounts = array_merge($movement_contracts, $movement_sales);
       
    $result = Array();

    foreach ($amounts as $movement)
    {
      
      if (!isset($result[$movement->getPaymentTypeId()]['name']))
      {
        $result[$movement->getPaymentTypeId()]['name'] = $movement->getPaymentType()->getFullName();
      }

      if (!isset($result[$movement->getPaymentTypeId()][$movement->getCurrencyPriceId()]['cup']))
      {
        $result[$movement->getPaymentTypeId()][$movement->getCurrencyPriceId()]['cup'] = $movement->getCurrencyPrice()->getPurchase();
        $result[$movement->getPaymentTypeId()][$movement->getCurrencyPriceId()]['total'] = 0;
      }

      $result[$movement->getPaymentTypeId()][$movement->getCurrencyPriceId()][$movement->getId()]['sum'] = $movement->getSum();
      $result[$movement->getPaymentTypeId()][$movement->getCurrencyPriceId()]['total'] += $movement->getSum();
            
    }   
       
    return $result;
  }
  
  
  /**
   * Retorna el nombre del estado de la session
   * 
   * @return String
   */
   public static function getStates()
   {
    return StatesClass::getArrayStateName('CashBox');
   }
   
   
   /**
    *
    * @param Int $business_entity_id
    * @return CashBox
    */
   public static function getOpenCashBoxByBusinessEntity($business_entity_id)
   {
     $criteria = new Criteria();
     $criteria->add(self::ID_STATE, 1); // Abierta
     $criteria->addJoin(self::NIGHT_AUDIT_ID, NightAuditPeer::ID);
     $criteria->add(NightAuditPeer::BUSINESS_ENTITY_ID, $business_entity_id);
     
     return self::doSelect($criteria);
     
   }
   
   /**
    *  Cierra todas las cajas que esten abiertas
    *  para una dependencia
    *
    * @param Int $business_entity_id
    * @param PropelPDO $con 
    */
   public static function CloseAllCashBox($business_entity_id, $night_audit_id, $con = null)
   {
     $cashboxs = self::getCashBoxByBusinessEntityId($business_entity_id, $night_audit_id, 1);
     
     foreach ($cashboxs as $cashbox)
     {
       $cashbox->Close($con);
     }     
   }
   
   
   /**
   * @param Int $business_entity_id
   * @param Int $night_audit_id
   * @param Int $id_state || null
   * @return CashBoxs
   */
  public static function getCashBoxByBusinessEntityId($business_entity_id, $night_audit_id = null, $id_state = null)
  {
     $criteria = new Criteria();
     $criteria->addJoin(self::NIGHT_AUDIT_ID, NightAuditPeer::ID);     
     $criteria->add(NightAuditPeer::BUSINESS_ENTITY_ID, $business_entity_id);
     $criteria->addGroupByColumn(self::ID);
     
     if($night_audit_id)
     {
	$criteria->add(self::NIGHT_AUDIT_ID, $night_audit_id);
     }
     
     if($id_state)
     {
	$criteria->add(self::ID_STATE, $id_state);
     }
     
     return self::doSelect($criteria);     
  }
  
  
  
} // CashBoxPeer
