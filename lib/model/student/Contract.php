<?php


/**
 * Skeleton subclass for representing a row from the 'sch_contract' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sun Oct  7 14:56:18 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.student
 */
class Contract extends BaseContract {

   /**
      * Retorna el turno en el que se encuentra 
      * actualmente el estudiante
      * 
      * @return string 
      */
     public function getTurno()
     {	
	$r = '';
	$attribute = AttributeContractPeer::getAttributeByKeyAndContract('turno', $this->getId(), 2);
	
	if($attribute->getValue() == '1')
	{
	   $r = 'MaÃ±ana';
	} 
	elseif($attribute->getValue() == '2')
	{
	   $r = 'Tarde';
	} 
	elseif($attribute->getValue() == '3')
	{
	   $r = 'Noche';
	}
	
	return $r;
     }
     
     
     /**
      * Devuelve el ciclo y nivel en el que se encuentra actualmente el estudiante
      * 
      * @return Array(ciclo, nivel)
      */
     public function getNivelCiclo()
     {	
	$ciclo = '';
	$nivel = '';	
	
	$attribute = AttributeContractPeer::getAttributeByKeyAndContract('nivel', $this->getId(), 2);
	
	$valor = $attribute->getValue();
	switch ($valor)
	{
	  case 1:	     
	     $ciclo = 'Inicial';
	     $nivel = 'Pre Quinder';
	     break;
	  case 2:
	     $ciclo = 'Inicial';
	     $nivel = 'Quinder';
	     break;
	  case 3:
	     $ciclo = 'Primaria';
	     $nivel = 'Primero';
	     break;
	  case 4:
	     $ciclo = 'Primaria';
	     $nivel = 'Segundo';
	     break;
	  case 5:
	     $ciclo = 'Primaria';
	     $nivel = 'Tercero';
	     break;
	  case 6:
	     $ciclo = 'Primaria';
	     $nivel = 'Cuarto';
	     break;
	  case 7:
	     $ciclo = 'Primaria';
	     $nivel = 'Quinto';
	     break;
	  case 8:
	     $ciclo = 'Primaria';
	     $nivel = 'Secto';
	     break;
	  case 9:
	     $ciclo = 'Secundaria';
	     $nivel = 'Primero';
	     break;
	  case 10:
	     $ciclo = 'Secundaria';
	     $nivel = 'Segundo';
	     break;
	  case 11:
	     $ciclo = 'Secundaria';
	     $nivel = 'Tercero';
	     break;
	  case 12:
	     $ciclo = 'Secundaria';
	     $nivel = 'Cuarto';
	     break;
	  case 13:
	     $ciclo = 'Secundaria';
	     $nivel = 'Quinto';
	     break;
	  case 14:
	     $ciclo = 'Secundaria';
	     $nivel = 'Sexto';
	     break;	   
	}		
	
	return array($ciclo, $nivel);
     }
     
     function getCursoNivelTurno()
     {
	$texto = '';
	$conract_grade = ContractGradePeer::getContractGrade($this->getId(), null, 2);
	
	if(is_object($conract_grade))
	{
	  $texto = $conract_grade->getGrade()->getName().' - '.$conract_grade->getGrade()->getDegree()->getName().' - '.$conract_grade->getGrade()->getTimetable()->getDescription().' - '.$conract_grade->getContract()->getPeriod()->getName();
	  
	  
	}
	
	return $texto;
     }
     
     /**
      * Devuelve el saldo de un contrato
      * @return Float
      */
     function getSaldo()
     {
	$total = 0;
	
	$accounts = AccountPeer::getAccountByContract($this->getId());
	
	foreach ($accounts as $account)
	{
	   $total += $account->getSaldo();
	}
	
	return $total;
     }
     
     
     public function getContractGrade()
     {
	$array = array();
	$contract_grade = ContractGradePeer::getContractGrade($this->getId(), null, 2);
	
	if(is_object($contract_grade))
	{
	   $array['turno'] = $contract_grade->getGrade()->getTimetable()->getDescription();// Turno
	   $array['ciclo'] = $contract_grade->getGrade()->getDegree()->getName();// Ciclo
	   $array['curso'] = $contract_grade->getGrade()->getCurso()->getName();// Curso
           $array['grade_id'] = $contract_grade->getGradeId();// grade_id 
	}
	
	return $array;
     }
     
     public function getDatosMensualidad()
     {
	return ContractPeer::getDatosMensualidad($this->getId());
     }
     
     
     public function shareOfMaturing()
     {
	$mounth = (int)date('m');
	return ContractPeer::shareOfMaturing($this->getId(), $mounth);
     }
     
     
     public function EliminarMensualidadesSinPago($con)
     {
	 // obtenemos todos los saleaccount que no esten pagados
	 $sale_accounts = ContractPeer::getMensualidadSinPago($this->getId());
      
	 foreach ($sale_accounts as $sale_account)
	 { 
	    $sale_account->delete($con);
	 }
     }
     
     
     
     
} // Contract
