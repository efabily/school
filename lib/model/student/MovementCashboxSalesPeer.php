<?php


/**
 * Skeleton subclass for performing query and update operations on the 'sch_movement_cashbox_sales' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sun Nov 11 14:46:08 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.student
 */
class MovementCashboxSalesPeer extends BaseMovementCashboxSalesPeer {
   
   
      public static function createMovementCashboxSales($movement_cashbox_id, $sales_id, $movement_cashbox_sales = null, $con = null)
      {
	 if(!is_object($movement_cashbox_sales))
	 {
	    $movement_cashbox_sales = new MovementCashboxSales();
	 }

	 $movement_cashbox_sales->setMovementCashboxId($movement_cashbox_id);
	 $movement_cashbox_sales->setSalesId($sales_id);
	 $movement_cashbox_sales->save($con);

	 return $movement_cashbox_sales;
      }
   
   
     public static function getMovementCashboxBySales($sales_id)
     {
       $criteria = new Criteria();    
       $criteria->addJoin(self::MOVEMENT_CASHBOX_ID, MovementCashboxPeer::ID);    
       $criteria->add(self::SALES_ID, $sales_id);

       $criteria->addGroupByColumn(MovementCashboxPeer::ID);

       return MovementCashboxPeer::doSelect($criteria);    
     }
     
     
     public static function getMovementCashboxSalesByMovementCashboxId($movement_cashbox_id)
     {
       $criteria = new Criteria();

       $criteria->add(self::MOVEMENT_CASHBOX_ID, $movement_cashbox_id);

       return self::doSelectOne($criteria);    
     }
     
     
     
     public static function getFromSales($sales_id, $form_of_payment = null, $cashbox_id = null)
     {
       $criteria = new Criteria();
       $criteria->add(self::SALES_ID, $sales_id);

       $criteria->addJoin(self::MOVEMENT_CASHBOX_ID, MovementCashboxPeer::ID);
       $criteria->addJoin(MovementCashboxPeer::PAYMENT_TYPE_ID, PaymentTypePeer::ID);

       if($form_of_payment)
       {
	 $criteria->add(PaymentTypePeer::FORM_OF_PAYMENT_ID, $form_of_payment);
       } else {
	 $criteria->addDescendingOrderByColumn(PaymentTypePeer::FORM_OF_PAYMENT_ID);
       }

       if($cashbox_id)
       {
	 $criteria->add(MovementCashboxPeer::CASHBOX_ID, $cashbox_id);
       }

       return self::doSelect($criteria);
     }
  

} // MovementCashboxSalesPeer
