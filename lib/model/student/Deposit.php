<?php


/**
 * Skeleton subclass for representing a row from the 'sch_deposit' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Fri Sep 28 00:21:35 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.student
 */
class Deposit extends BaseDeposit {
   
     function getCupOfChange($sale = null)
     {
	 $t_c = 0;

	 $currency_price = CurrencyPricePeer::getActiveCurrencyPrice($this->getCurrencyId());

	 if(is_object($currency_price))
	 {
	    if($sale)
	    {
	       $t_c = $currency_price->getSale();
	    } else {
	       $t_c = $currency_price->getPurchase();
	    }
	 }

	 return $t_c;
     }
   
   /**
   * Devuelve el total pagado para un ContractCurrency (Deposit)
   * @return Float 
   */
  public function getTotalPay()
  {
    $total_pay = 0;
    
    $movement_cashboxs = MovementCashboxDepositPeer::getMovementCashboxByDepositId($this->getId());
    foreach ($movement_cashboxs as $movement_cashbox) {
      // $total_pay = numbers::my_format_round_calc($total_pay + $movement_cashbox->getCalculateSum());
      $total_pay = $total_pay + $movement_cashbox->getCalculateSum();
    }
    
    return $total_pay;
  }
  
  /**
   * Devuelve el total a pagar de un AccountCurrency (Deposito)
   * 
   * @return Float
   */
  public function getTotalPrice()
  {   
     // return numbers::my_format_round_calc($this->getAmount() * $this->getCurrency()->getPurchase());
     return ($this->getAmount() * $this->getCupOfChange());
  }

  
  public function changeInDollar()
  {
      $change = 0;
      
      if(DepositPeer::getCurrencyByDeposit($this->getId(), 2)) // 2 = $
      {
	 $currency_price = CurrencyPricePeer::getActiveCurrencyPrice(2); // $
	 
	 // $change = numbers::my_format_round_calc((($this->getTotalPay() - $this->getTotalPrice()) / $currency_price->getPurchase()));
	 $change = (($this->getTotalPay() - $this->getTotalPrice()) / $currency_price->getPurchase());
      }
      
      return $change;
  }
   
  public function changeInLocalCurrency()
  {
      // return numbers::my_format_round_calc($this->getTotalPay() - $this->getTotalPrice());
      return ($this->getTotalPay() - $this->getTotalPrice());
  }

 /**
   *
   *  Ajusta los pagos del contractCurrency
   * 
   * @param Int $cashbox_id
   * @param PropelPDO $con
   * @return type 
   */
  function adjustPay($cashbox_id = null, $con = null)
  {
    // Obtenemos los movimientos de este Deposito
    $pays = MovementCashboxDepositPeer::getFromDeposit($this->getId(), null, $cashbox_id);
     
    
    // Obtenemos las diferencias de lo pagado, contra lo que se debe pagar
    $diff = $this->getTotalPay() - $this->getTotalPrice();    

    foreach($pays as $pay)
    {
      //Obtenemos el total del movimiento
      $calculate_sum = $pay->getMovementCashbox()->getCalculateSum();
      
      
      $desc = $calculate_sum - $diff ;

      $c = new Criteria();
      $c->add(MovementCashboxPeer::ID, $pay->getMovementCashboxId());

      if($desc > 0)
      {
        $cu = new Criteria();
        $cu->add(MovementCashboxPeer::SUM, ($desc / $pay->getMovementCashbox()->getPaymentType()->getCupOfChange()));
        
        BasePeer::doUpdate($c, $cu, $con);
        
        return 0;
      } else {
        
        $cu = new Criteria();
        $cu->add(MovementCashboxPeer::SUM, 0);
        
        BasePeer::doUpdate($c, $cu, $con);
      }

      if($desc == 0)
      {
        return 0;
      } else {
        $diff = $diff - $calculate_sum;
      }
    }
    return $diff;
  }
  
  
  public function getMovementCashbox()
  {
     return DepositPeer::getMovementCashbox($this->getId());     
  }
  
  public function addReceipt($receipt_id, $con = null)
  {
     $movement_cashboxs = $this->getMovementCashbox();
     
     foreach ($movement_cashboxs as $movement_cashbox)
     {
	$movement_cashbox_receipt = MovementCashboxReceiptPeer::saveMovementCashboxReceipt($receipt_id, $movement_cashbox->getId(), null, $con);
	
	if(!is_object($movement_cashbox_receipt) || $movement_cashbox_receipt->getId() <= 0)
	{
	   throw new exception('movement_cashbox_receipt'); 
	}
     }
     
  }
  
  
  public function saldo()
  {
     // return  numbers::my_format_number_calc($this->getAmount() - SalesDepositPeer::getTotalSales($this->getId()));
     return  $this->getAmount() - SalesDepositPeer::getTotalSales($this->getId());
  }
  
  public function getAccountId()
  {
     $account_id = 0;
     $account_deposit = AccountDepositPeer::getAccountDeposit(null, $this->getId());
     if(is_object($account_deposit))
     {
	$account_id = $account_deposit->getAccountId();
     }
     
     return $account_id;
  }
  
  public function getStudentName()
  {
      $full_name = '';
      $student = StudentPeer::getStudentByDeposit($this->getId());
      
      if(is_object($student))
      {
          $full_name = $student->getFullName().' ( Codigo: '.$student->getCodigo().' )';
      }
      
      return $full_name;
  }
  
  public function getReceiptId()
  {
     $receipt_id = 0;
     $receipt = DepositPeer::getReceipt($this->getId());
     
     if(is_object($receipt))
     {
	$receipt_id = $receipt->getId();
     }
     
     return $receipt_id;
  }
  
  public function getContractId()
  {
     $contract_id = 0;
     $contract = DepositPeer::getContract($this->getId());
     
     if($contract)
     {
	$contract_id = $contract->getId();
     }
     
     return $contract_id;
  }
  
  public function delAccountDeposit($con = null)
  {
     $account_deposits = AccountDepositPeer::getAccountDeposit(null, $this->getId(), 1, 1);
     
     foreach ($account_deposits as $account_deposit)
     {
	$account_deposit->delete($con);
     }
  }
  
  public function getSalesDepositFAY($con = null)
  {
      $SalesDeposits =  SalesDepositPeer::getSalesDepositByDeposit($this->getId());
    
     $string = '';
     $total = 0;
     foreach ($SalesDeposits as $SalesDeposit)
     {
        $total = $total + $SalesDeposit->getAmount();
	$string .= "<br /> sd {$SalesDeposit->getId()} 
                           {$SalesDeposit->getAmount()} 
                   <br /> $total";
     }
     
     return $string;
  }
  
} // Deposit