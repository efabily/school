<?php


/**
 * Skeleton subclass for performing query and update operations on the 'sch_account' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Sep 12 01:53:15 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.student
 */
class AccountPeer extends BaseAccountPeer {

   /**
    *
    * @param Int $id_state
    * @param String $name
    * @param Tinyint $number
    * @param Int $contract_id
    * @param Account $account || null
    * @param PropelPDO $con
    * @return Account
    */
   public static function saveAccount($id_state, $name, $number, $contract_id, $account = null, $con = null)
   {
      if(!is_object($account))
      {
	 $account = new Account();
      }

      $account->setIdState($id_state);
      $account->setName($name);
      $account->setNumber($number);
      $account->setContractId($contract_id);
      $account->save($con);

      return $account;
   }

   /**
    *
     * @param Int $id_state || null
    * @param String $name || null
    * @param Tinyint $number || null
    * @param Int $contract_id || null
    * @param Boolean $all || null
    * @return Account || Accounts
    */
   public static function getAccount($id_state = null, $name = null, $number = null, $contract_id = null, $all = null)
   {
      $criteria = new Criteria();

      if($id_state)
      {
	 $criteria->add(self::ID_STATE, $id_state);
      }

      if($name)
      {
	$criteria->add(self::NAME, $name);
      }

      if($number)
      {
	 $criteria->add(self::NUMBER, $number);
      }

      if($contract_id)
      {
	 $criteria->add(self::CONTRACT_ID, $contract_id);
      }

      if($all)
      {
	 return self::doSelect($criteria);
      } else {
	 return self::doSelectOne($criteria);
      }
   }

   /**
    *
    * @param Int $account_id
    * @return Float
    */
   Public static function getTotalDeuda($account_id = null)
   {
      $total = 0;
      $criteria = new Criteria();

      if($account_id)
      {
	 	$criteria->add(self::ID, $account_id);
      }

      $criteria->addJoin(self::ID, SaleAccountPeer::ACCOUNT_ID);
      $criteria->addJoin(SaleAccountPeer::SALES_ID, SalesPeer::ID);
      $criteria->addJoin(SalesPeer::ID, ItemForSalePeer::SALES_ID);
      $criteria->addGroupByColumn(ItemForSalePeer::ID);

      $item_for_sales = ItemForSalePeer::doSelect($criteria);

      foreach ($item_for_sales as $item_for_sale) {
	 		$total += $item_for_sale->getTotalPriceDiscount();
      }

      $total;


      return $total;
   }


   /**
    * devuelve el total de descuento de los items de la cuenta
    * @param Int $account_id
    * @return Float
    */
   Public static function getTotalDeudaDiscount($account_id = null)
   {
      $total = 0;
      $criteria = new Criteria();

      if($account_id)
      {
	 $criteria->add(self::ID, $account_id);
      }

      $criteria->addJoin(self::ID, SaleAccountPeer::ACCOUNT_ID);
      $criteria->addJoin(SaleAccountPeer::SALES_ID, SalesPeer::ID);
      $criteria->addJoin(SalesPeer::ID, ItemForSalePeer::SALES_ID);
      $criteria->addGroupByColumn(ItemForSalePeer::ID);

      $sales = SalePeer::doSelect($criteria);

      foreach ($sales as $sale) {
	 $total += $sale->getAmountDiscountTentative();
      }

      return $total;
   }

   /**
    *
    * @param Int $account_id
    * @return Float
    * HASTA EL 31-12-13
    */
//    public static function getTotalPago($account_id)
//    {
//       $total = 0;

//       $deposits = DepositPeer::getDepositByAccountId($account_id);

//       foreach ($deposits as $deposit) {
// 	 	$total += $deposit->getAmount();
//       }

//       return $total;
//    }


   /**
    *
    * @param Int $account_id
    * @return Float
    */
   public static function getTotalPago($account_id)
   {
   	$total = 0;

   	$salesAccounts = SaleAccountPeer::getTotalPagoByAccount($account_id);

   	foreach ($salesAccounts as $salesAccount) {
   		$total += $salesAccount->getSales()->getTotalSaleDeposit();
   	}

   	return $total;
   }


   public static function getMora($account_id, $id_state = 1, $all = null)
   {
      $criteria = new Criteria();
      $criteria->addJoin(self::ID, SaleAccountPeer::ACCOUNT_ID);
      $criteria->addJoin(SaleAccountPeer::SALES_ID, SalesPeer::ID);
      $criteria->addJoin(SalesPeer::ID, ItemForSalePeer::SALES_ID);
      $criteria->add(ItemForSalePeer::ITEM_ID, 1);// que sea mora
      $criteria->add(self::ID, $account_id);
      $criteria->add(SaleAccountPeer::ID_STATE, $id_state);

      if($all)
      {
	 return ItemForSalePeer::doSelect($criteria);
      } else {
	 return ItemForSalePeer::doSelectOne($criteria);
      }
   }

   public static function getMoraSinPago($account_id)
   {
      $criteria = new Criteria();
      $criteria->addJoin(self::ID, SaleAccountPeer::ACCOUNT_ID);
      $criteria->addJoin(SaleAccountPeer::SALES_ID, SalesPeer::ID);
      $criteria->addJoin(SalesPeer::ID, ItemForSalePeer::SALES_ID);
      $criteria->add(ItemForSalePeer::ITEM_ID, 1);// que sea mora
      $criteria->add(self::ID, $account_id);
      $criteria->add(SaleAccountPeer::ID_STATE, 3, Criteria::LESS_THAN);

      return ItemForSalePeer::doSelectOne($criteria);
   }


   public static function getAccountByContract($contract_id)
   {
      $criteria = new Criteria();
      $criteria->add(self::CONTRACT_ID, $contract_id);
      $criteria->addGroupByColumn(self::ID);

      return self::doSelect($criteria);
   }

   public static function getTotalDeudaReports($period_id, $student_id, $nro_mes)
   {
      $total = 0;
      $criteria = new Criteria();

      $criteria->addJoin(self::CONTRACT_ID, ContractPeer::ID);
      $criteria->addJoin(ContractGradePeer::CONTRACT_ID, ContractPeer::ID);

      $criteria->add(ContractPeer::STUDENT_ID, $student_id);
      $criteria->add(self::NUMBER, $nro_mes);
      $criteria->add(ContractPeer::PERIOD_ID, $period_id);

      $criteria->addJoin(self::ID, SaleAccountPeer::ACCOUNT_ID);

      $criteria->addJoin(SaleAccountPeer::SALES_ID, SalesPeer::ID);

      $criteria->addGroupByColumn(SalesPeer::ID);

      $criteria->add(ContractGradePeer::ID_STATE, 2);

      $saless = SalesPeer::doSelect($criteria);

      foreach ($saless as $sales) {
	 $total += $sales->getSaldoByDeposit();
      }

      return $total;
   }

   public static function getMes($nro_mes)
   {
      $nom_mes = '';
      switch ($nro_mes)
      {
	 case 1:
	    $nom_mes = 'ENERO';
	    break;
	 case 2:
	    $nom_mes = 'FEBRERO';
	    break;
	 case 3:
	    $nom_mes = 'MARZO';
	    break;
	 case 4:
	    $nom_mes = 'ABRIL';
	    break;
	 case 5:
	    $nom_mes = 'MAYO';
	    break;
	 case 6:
	    $nom_mes = 'JUNIO';
	    break;
	 case 7:
	    $nom_mes = 'JULIO';
	    break;
	 case 8:
	    $nom_mes = 'AGOSTO';
	    break;
	 case 9:
	    $nom_mes = 'SEPTIEMBRE';
	    break;
	 case 10:
	    $nom_mes = 'OCTUBRE';
	    break;
      }

      return $nom_mes;
   }

   public static function getAccountReporteIngresoDia($period_id, $from_date, $to_date)
   {
      $criteria = new Criteria();

      $criteria->addJoin(self::CONTRACT_ID, ContractPeer::ID);
      $criteria->addJoin(ContractGradePeer::CONTRACT_ID, ContractPeer::ID);

      $criteria->add(ContractPeer::PERIOD_ID, $period_id);

      $criteria->addJoin(self::ID, SaleAccountPeer::ACCOUNT_ID);
      $criteria->addJoin(SaleAccountPeer::SALES_ID, SalesPeer::ID);
      $criteria->addJoin(SalesPeer::ID, SalesDepositPeer::SALES_ID);
      $criteria->addJoin(SalesDepositPeer::DEPOSIT_ID, DepositPeer::ID);
      $criteria->addJoin(DepositPeer::ID, MovementCashboxDepositPeer::DEPOSIT_ID);
      $criteria->addJoin(MovementCashboxDepositPeer::MOVEMENT_CASHBOX_ID, MovementCashboxReceiptPeer::MOVEMENT_CASHBOX_ID);
      $criteria->addJoin(MovementCashboxReceiptPeer::RECEIPT_ID, ReceiptPeer::ID);
      $criteria->addJoin(ReceiptPeer::NIGHT_AUDIT_ID, NightAuditPeer::ID);

      $criteria->add(NightAuditPeer::DATE, $from_date, Criteria::GREATER_EQUAL);
      $criteria->addAnd(NightAuditPeer::DATE, $to_date, Criteria::LESS_EQUAL);

      $criteria->add(ContractGradePeer::ID_STATE, 2);

      $criteria->addGroupByColumn(self::NUMBER);

      $accounts = self::doSelect($criteria);

      return $accounts;
   }


} // AccountPeer
