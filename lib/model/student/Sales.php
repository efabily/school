<?php


/**
 * Skeleton subclass for representing a row from the 'sch_sales' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Fri Sep 28 00:21:34 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.student
 */
class Sales extends BaseSales {
   
   public function getTotalPrice()
   {
      $total = 0;
      
      $item_for_sales = ItemForSalePeer::getItemForSaleBySales($this->getId());
      
      foreach ($item_for_sales as $item_for_sale)
      {
	 $total += $item_for_sale->getTotalPriceDiscount();
      }
      
      return $total;
   }   
   
   public function getTotalPriceDiscount()
   {
      $total = 0;
      
      $item_for_sales = ItemForSalePeer::getItemForSaleBySales($this->getId());
      
      foreach ($item_for_sales as $item_for_sale)
      {
	 $total += $item_for_sale->getTotalPriceDiscount();
      }
      
      return $total;
   }
   
   public function getTotalDiscount()
   {
      $total = 0;            
      
      $item_for_sales = ItemForSalePeer::getItemForSaleBySales($this->getId());
      
      foreach ($item_for_sales as $item_for_sale)
      {
	 
	 $total += $item_for_sale->getTotalDiscount();
      }
      
      return $total;
   }

   public function getIsPay()
   {
      $r = false;
      
      $sales_account = SalesPeer::getIsAccount($this->getId(), 1);
      
      $sales_direct = SalesPeer::isDirectSelling($this->getId(), 1);
      
      if(is_object($sales_account) || is_object($sales_direct))
      {
	 $r = true;
      }
      
      return $r;
   }
   
   
   public function getSaldo()
   {      
      // return numbers::my_format_number_calc($this->getTotalPriceDiscount());
      return $this->getTotalPriceDiscount();
   }
   
   
   public function getSaldoByDeposit()
   {      
      // return numbers::my_format_number_calc($this->getTotalPriceDiscount() - $this->getTotalSaleDeposit());
      return $this->getTotalPriceDiscount() - $this->getTotalSaleDeposit();
   }
   
   
   public function getStateSalesAccount()
   {
      $state_id = 0;
      $sales_account = SaleAccountPeer::getBySales($this->getId());
      
      if(is_object($sales_account))
      {
	 $state_id = $sales_account->getIdState();
      }
      
      return $state_id;
   }
   
   
   public function getIsNotPay()
   {
      $r = false;
      $sales = SalesPeer::getIsNotPay($this->getId());
      
      $item_for_sale = ItemForSalePeer::getItemMoras($this->getId());
      
      if(is_object($sales) && !is_object($item_for_sale))
      {
	 $r = true;
      }
      
      return $r;
   }
   
   public function getIsPayAccount()
   {
      $r = false;
      $sales = SaleAccountPeer::getBySales($this->getId(), null,null, 3);
      
      if(is_object($sales))
      {
	 $r = true;
      }
      
      return $r;
   }
   
   public function getPaymentsHave()
   {
      $r = false;
      $sales = SaleAccountPeer::getBySales($this->getId(), null, 2);
      
      if(is_object($sales))
      {
	 $r = true;
      }
      
      return $r;
      
   }
   
   public function getTotalPay()
   {
       $total_pay = 0;
    
       $movement_cashboxs = MovementCashboxSalesPeer::getMovementCashboxBySales($this->getId());
       foreach ($movement_cashboxs as $movement_cashbox) {
	 $total_pay += $movement_cashbox->getCalculateSum();
       }

       return $total_pay;
   }
   
   public function changeInDollar()
   {
      $change = 0;
      
      if(SalesPeer::getCurrencyBySales($this->getId(), 2)) // 2 = $
      {
	 $currency_price = CurrencyPricePeer::getActiveCurrencyPrice(2); // $
	 
	 $change = (($this->getTotalPay() - $this->getTotalPrice()) / $currency_price->getPurchase());
      }
      
      return $change;
   }
   
   public function changeInLocalCurrency()
   {
      return ($this->getTotalPay() - $this->getTotalPrice());
   }
   
   
   
  function adjustPay($cashbox_id = null, $con = null)
  {
    // Obtenemos los movimientos de este Deposito
    $pays = MovementCashboxSalesPeer::getFromSales($this->getId(), null, $cashbox_id);                     

    // Obtenemos las diferencias de lo pagado, contra lo que se debe pagar
    $diff = $this->getTotalPay() - $this->getTotalPrice();    

    foreach($pays as $pay)
    {
      //Obtenemos el total del movimiento
      $calculate_sum = $pay->getMovementCashbox()->getCalculateSum();

      $desc = $calculate_sum - $diff ;

      $c = new Criteria();
      $c->add(MovementCashboxPeer::ID, $pay->getMovementCashboxId());

      if($desc > 0)
      {
	$cu = new Criteria();
	$cu->add(MovementCashboxPeer::SUM, ($desc / $pay->getMovementCashbox()->getPaymentType()->getCupOfChange()));

	BasePeer::doUpdate($c, $cu, $con);

	return 0;
      } else {

	$cu = new Criteria();
	$cu->add(MovementCashboxPeer::SUM, 0);

	BasePeer::doUpdate($c, $cu, $con);
      }

      if($desc == 0)
      {
	return 0;
      } else {
	$diff = $diff - $calculate_sum;
      }
    }
    
    return $diff;
  }
  
  public function getMovementCashbox()
  {
     return SalesPeer::getMovementCashbox($this->getId());     
  }
  
  public function addReceipt($receipt_id, $con = null)
  {
     $movement_cashboxs = $this->getMovementCashbox();
     
     foreach ($movement_cashboxs as $movement_cashbox)
     {
	$movement_cashbox_receipt = MovementCashboxReceiptPeer::saveMovementCashboxReceipt($receipt_id, $movement_cashbox->getId(), null, $con);
	
	if(!is_object($movement_cashbox_receipt) || $movement_cashbox_receipt->getId() <= 0)
	{
	   throw new exception('movement_cashbox_receipt'); 
	}
     }
  }
  
  /**
   * Este metodo de devuelve el total pagado de una venta
   * 
   * @return float
   */
  public function getTotalSaleDeposit()
  {
     return SalesDepositPeer::getTotalBySales($this->getId());
  }
  
  public function getIsPayForContract()
  {
     $r = false;   
     $sales = SalesPeer::IsPayForContract($this->getId());
     
     if(is_object($sales))
     {
	$r = true;
     }
     
     return $r;
  }
  
  
  public function getItemForSaleBySales()
  {
      $array_item = array();
      
      $item_for_sales = ItemForSalePeer::getItemForSaleBySales($this->getId());
      
      foreach ($item_for_sales as $item_for_sale)
      {
	 $array_item[$item_for_sale->getId()] = array('name' => $item_for_sale->getItem()->getName(), 'amount' => $item_for_sale->getTotalPriceDiscount());
      }
      
      return $array_item;
   }
   
   
   /**
    * Verifica si el item de la venta soporta 
    * el descuento del 100 %
    * 
    * @return boolean 
    */
   public function getDiscount100()
   {
      $r = false;
      
      $item_for_sales = ItemForSalePeer::getItemForSaleBySales($this->getId());
      
      foreach ($item_for_sales as $item_for_sale)
      {
	 if($item_for_sale->getPrice() == $item_for_sale->getDiscount())
	 {
	    $r = true;
	    break;
	 }
      }
      
      return $r;
   }
   
   
   public function getNameSalesAccount()
   {
      $name = 0;
      $sales_account = SaleAccountPeer::getBySales($this->getId());
      
      if(is_object($sales_account))
      {
	       $name = $sales_account->getAccount()->getName();
      }
      
      return $name;
   }

   public function getNumberSalesAccount()
   {
      $number = 0;
      $sales_account = SaleAccountPeer::getBySales($this->getId());
      
      if(is_object($sales_account))
      {
         $number = $sales_account->getAccount()->getNumber();
      }
      
      return $number;
   }
   
   
   public function getSalesDepositFromCreatedAt()
   {
      $created_at = '';
      $sales_deposit = SalesDepositPeer::getSalesDeposit(null, null, $this->getId());
      
      if(is_object($sales_deposit))
      {
	 $created_at = $sales_deposit->getDeposit()->getCreatedAt();
      }
      
      return $created_at;
   }
   
   
   public function getIdAccount()
   {
      $id = 0;
      $sales_account = SaleAccountPeer::getBySales($this->getId());
      
      if(is_object($sales_account))
      {
	 $id = $sales_account->getAccountId();
      }
      
      return $id;
   }
  
  
   
   
   
} // Sales