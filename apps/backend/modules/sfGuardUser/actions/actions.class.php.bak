<?php
// auto-generated by sfPropelAdmin
// date: 2008/03/28 22:29:39
?>
<?php

/**
 * autoSfGuardUser actions.
 *
 * @package    ##PROJECT_NAME##
 * @subpackage autoSfGuardUser
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: actions.class.php 3501 2007-02-18 10:28:17Z fabien $
 */
class SfGuardUserActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('sfGuardUser', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/sf_guard_user/filters');

    // pager
    $this->pager = new sfPropelPager('sfGuardUser', 20);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('sfGuardUser', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('sfGuardUser', 'edit');
  }

  public function executeEdit()
  {
    $this->sf_guard_user = $this->getsfGuardUserOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updatesfGuardUserFromRequest();

      $this->savesfGuardUser($this->sf_guard_user);

      $this->setFlash('notice', 'Your modifications have been saved');

      if ($this->getRequestParameter('do_after') == 'save_and_create')
      {
        return $this->redirect('sfGuardUser/create');
      }
      else if ($this->getRequestParameter('do_after') == 'save_and_list')
      {
        return $this->redirect('sfGuardUser/list');
      }
      else
      {
        return $this->redirect('sfGuardUser/edit?id='.$this->sf_guard_user->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->sf_guard_user = sfGuardUserPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->sf_guard_user);

    try
    {
      $this->deletesfGuardUser($this->sf_guard_user);
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'Could not delete the selected Sf guard user. Make sure it does not have any associated items.');
      return $this->forward('sfGuardUser', 'list');
    }

    return $this->redirect('sfGuardUser/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->sf_guard_user = $this->getsfGuardUserOrCreate();
    $this->updatesfGuardUserFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function savesfGuardUser($sf_guard_user)
  {
    $sf_guard_user->save();

      // Update many-to-many for "groups"
      $c = new Criteria();
      $c->add(sfGuardUserGroupPeer::USER_ID, $sf_guard_user->getPrimaryKey());
      sfGuardUserGroupPeer::doDelete($c);

      $ids = $this->getRequestParameter('associated_groups');
      if (is_array($ids))
      {
        foreach ($ids as $id)
        {
          $SfGuardUserGroup = new sfGuardUserGroup();
          $SfGuardUserGroup->setUserId($sf_guard_user->getPrimaryKey());
          $SfGuardUserGroup->setGroupId($id);
          $SfGuardUserGroup->save();
        }
      }

      // Update many-to-many for "permissions"
      $c = new Criteria();
      $c->add(sfGuardUserPermissionPeer::USER_ID, $sf_guard_user->getPrimaryKey());
      sfGuardUserPermissionPeer::doDelete($c);

      $ids = $this->getRequestParameter('associated_permissions');
      if (is_array($ids))
      {
        foreach ($ids as $id)
        {
          $SfGuardUserPermission = new sfGuardUserPermission();
          $SfGuardUserPermission->setUserId($sf_guard_user->getPrimaryKey());
          $SfGuardUserPermission->setPermissionId($id);
          $SfGuardUserPermission->save();
        }
      }

  }

  protected function deletesfGuardUser($sf_guard_user)
  {
    $sf_guard_user->delete();
  }

  protected function updatesfGuardUserFromRequest()
  {
    $sf_guard_user = $this->getRequestParameter('sf_guard_user');

    if (isset($sf_guard_user['username']))
    {
      $this->sf_guard_user->setUsername($sf_guard_user['username']);
    }
    if (isset($sf_guard_user['password']))
    {
      $this->sf_guard_user->setPassword($sf_guard_user['password']);
    }
    if (isset($sf_guard_user['password_bis']))
    {
      $this->sf_guard_user->setPasswordBis($sf_guard_user['password_bis']);
    }
    if (isset($sf_guard_user['last_login']))
    {
      if ($sf_guard_user['last_login'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($sf_guard_user['last_login']))
          {
            $value = $dateFormat->format($sf_guard_user['last_login'], 'I', $dateFormat->getInputPattern('g'));
          }
          else
          {
            $value_array = $sf_guard_user['last_login'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->sf_guard_user->setLastLogin($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->sf_guard_user->setLastLogin(null);
      }
    }
    $this->sf_guard_user->setIsActive(isset($sf_guard_user['is_active']) ? $sf_guard_user['is_active'] : 0);
    if (isset($sf_guard_user['groups']))
    {
      $this->sf_guard_user->setGroups($sf_guard_user['groups']);
    }
    if (isset($sf_guard_user['permissions']))
    {
      $this->sf_guard_user->setPermissions($sf_guard_user['permissions']);
    }
  }

  protected function getsfGuardUserOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $sf_guard_user = new sfGuardUser();
    }
    else
    {
      $sf_guard_user = sfGuardUserPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($sf_guard_user);
    }

    return $sf_guard_user;
  }

  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/sf_guard_user/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/sf_guard_user/filters');
    }
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/sf_guard_user/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/sf_guard_user/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/sf_guard_user/sort'))
    {
    }
  }

  protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['username_is_empty']))
    {
      $criterion = $c->getNewCriterion(sfGuardUserPeer::USERNAME, '');
      $criterion->addOr($c->getNewCriterion(sfGuardUserPeer::USERNAME, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['username']) && $this->filters['username'] !== '')
    {
      $c->add(sfGuardUserPeer::USERNAME, strtr($this->filters['username'], '*', '%'), Criteria::LIKE);
    }
  }

  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/sf_guard_user/sort'))
    {
      $sort_column = sfGuardUserPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/sf_guard_user/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'sf_guard_user{username}' => 'Username:',
      'sf_guard_user{password}' => 'Password:',
      'sf_guard_user{password_bis}' => 'Password bis:',
      'sf_guard_user{last_login}' => 'Last login:',
      'sf_guard_user{is_active}' => 'Is active:',
      'sf_guard_user{groups}' => 'Groups/Roles:',
      'sf_guard_user{permissions}' => 'permissions:',
    );
  }
}
